// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.20.3
// source: notification.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "notification";

export interface VerifyOTPRequest {
  /** Email address */
  email: string;
  /** OTP code to verify */
  otp: string;
}

export interface ForgotPasswordRequest {
  /** User ID */
  userId: string;
  /** Email address */
  email: string;
  /** Password reset link */
  resetLink: string;
}

export interface OTPRequest {
  userId: string;
  email: string;
  username: string;
}

export interface GetNotificationRequest {
  notificationId: string;
  userId: string;
}

export interface GetAllNotificationsRequest {
  userId: string;
  page: number;
  pageSize: number;
  /** Filter by read status */
  isRead: boolean;
  /** Filter by notification type */
  type: string;
}

export interface MarkNotificationRequest {
  notificationId: string;
  userId: string;
}

export interface MarkAllNotificationsRequest {
  userId: string;
}

export interface NotificationResponse {
  /** Indicates success or failure */
  success: boolean;
  /** Response message */
  message: string;
}

export interface Notification {
  id: string;
  userId: string;
  type: string;
  subject: string;
  body: string;
  recipient: string;
  isRead: boolean;
  createdAt: string;
}

export interface GetAllNotificationsResponse {
  notifications: Notification[];
  total: number;
  page: number;
  pageSize: number;
}

function createBaseVerifyOTPRequest(): VerifyOTPRequest {
  return { email: "", otp: "" };
}

export const VerifyOTPRequest: MessageFns<VerifyOTPRequest> = {
  encode(message: VerifyOTPRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.otp !== "") {
      writer.uint32(26).string(message.otp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyOTPRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyOTPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.otp = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyOTPRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      otp: isSet(object.otp) ? globalThis.String(object.otp) : "",
    };
  },

  toJSON(message: VerifyOTPRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.otp !== "") {
      obj.otp = message.otp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerifyOTPRequest>, I>>(base?: I): VerifyOTPRequest {
    return VerifyOTPRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifyOTPRequest>, I>>(object: I): VerifyOTPRequest {
    const message = createBaseVerifyOTPRequest();
    message.email = object.email ?? "";
    message.otp = object.otp ?? "";
    return message;
  },
};

function createBaseForgotPasswordRequest(): ForgotPasswordRequest {
  return { userId: "", email: "", resetLink: "" };
}

export const ForgotPasswordRequest: MessageFns<ForgotPasswordRequest> = {
  encode(message: ForgotPasswordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.resetLink !== "") {
      writer.uint32(26).string(message.resetLink);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ForgotPasswordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseForgotPasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.resetLink = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ForgotPasswordRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      resetLink: isSet(object.resetLink) ? globalThis.String(object.resetLink) : "",
    };
  },

  toJSON(message: ForgotPasswordRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.resetLink !== "") {
      obj.resetLink = message.resetLink;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ForgotPasswordRequest>, I>>(base?: I): ForgotPasswordRequest {
    return ForgotPasswordRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ForgotPasswordRequest>, I>>(object: I): ForgotPasswordRequest {
    const message = createBaseForgotPasswordRequest();
    message.userId = object.userId ?? "";
    message.email = object.email ?? "";
    message.resetLink = object.resetLink ?? "";
    return message;
  },
};

function createBaseOTPRequest(): OTPRequest {
  return { userId: "", email: "", username: "" };
}

export const OTPRequest: MessageFns<OTPRequest> = {
  encode(message: OTPRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.username !== "") {
      writer.uint32(26).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OTPRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOTPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.username = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OTPRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
    };
  },

  toJSON(message: OTPRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OTPRequest>, I>>(base?: I): OTPRequest {
    return OTPRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OTPRequest>, I>>(object: I): OTPRequest {
    const message = createBaseOTPRequest();
    message.userId = object.userId ?? "";
    message.email = object.email ?? "";
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseGetNotificationRequest(): GetNotificationRequest {
  return { notificationId: "", userId: "" };
}

export const GetNotificationRequest: MessageFns<GetNotificationRequest> = {
  encode(message: GetNotificationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.notificationId !== "") {
      writer.uint32(10).string(message.notificationId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetNotificationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNotificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.notificationId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNotificationRequest {
    return {
      notificationId: isSet(object.notificationId) ? globalThis.String(object.notificationId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: GetNotificationRequest): unknown {
    const obj: any = {};
    if (message.notificationId !== "") {
      obj.notificationId = message.notificationId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetNotificationRequest>, I>>(base?: I): GetNotificationRequest {
    return GetNotificationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetNotificationRequest>, I>>(object: I): GetNotificationRequest {
    const message = createBaseGetNotificationRequest();
    message.notificationId = object.notificationId ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseGetAllNotificationsRequest(): GetAllNotificationsRequest {
  return { userId: "", page: 0, pageSize: 0, isRead: false, type: "" };
}

export const GetAllNotificationsRequest: MessageFns<GetAllNotificationsRequest> = {
  encode(message: GetAllNotificationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.page !== 0) {
      writer.uint32(16).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.isRead !== false) {
      writer.uint32(32).bool(message.isRead);
    }
    if (message.type !== "") {
      writer.uint32(42).string(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllNotificationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllNotificationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isRead = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.type = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllNotificationsRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      isRead: isSet(object.isRead) ? globalThis.Boolean(object.isRead) : false,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
    };
  },

  toJSON(message: GetAllNotificationsRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.isRead !== false) {
      obj.isRead = message.isRead;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllNotificationsRequest>, I>>(base?: I): GetAllNotificationsRequest {
    return GetAllNotificationsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllNotificationsRequest>, I>>(object: I): GetAllNotificationsRequest {
    const message = createBaseGetAllNotificationsRequest();
    message.userId = object.userId ?? "";
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    message.isRead = object.isRead ?? false;
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseMarkNotificationRequest(): MarkNotificationRequest {
  return { notificationId: "", userId: "" };
}

export const MarkNotificationRequest: MessageFns<MarkNotificationRequest> = {
  encode(message: MarkNotificationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.notificationId !== "") {
      writer.uint32(10).string(message.notificationId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkNotificationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkNotificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.notificationId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarkNotificationRequest {
    return {
      notificationId: isSet(object.notificationId) ? globalThis.String(object.notificationId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: MarkNotificationRequest): unknown {
    const obj: any = {};
    if (message.notificationId !== "") {
      obj.notificationId = message.notificationId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MarkNotificationRequest>, I>>(base?: I): MarkNotificationRequest {
    return MarkNotificationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MarkNotificationRequest>, I>>(object: I): MarkNotificationRequest {
    const message = createBaseMarkNotificationRequest();
    message.notificationId = object.notificationId ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseMarkAllNotificationsRequest(): MarkAllNotificationsRequest {
  return { userId: "" };
}

export const MarkAllNotificationsRequest: MessageFns<MarkAllNotificationsRequest> = {
  encode(message: MarkAllNotificationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkAllNotificationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkAllNotificationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarkAllNotificationsRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: MarkAllNotificationsRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MarkAllNotificationsRequest>, I>>(base?: I): MarkAllNotificationsRequest {
    return MarkAllNotificationsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MarkAllNotificationsRequest>, I>>(object: I): MarkAllNotificationsRequest {
    const message = createBaseMarkAllNotificationsRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseNotificationResponse(): NotificationResponse {
  return { success: false, message: "" };
}

export const NotificationResponse: MessageFns<NotificationResponse> = {
  encode(message: NotificationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NotificationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NotificationResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: NotificationResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NotificationResponse>, I>>(base?: I): NotificationResponse {
    return NotificationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NotificationResponse>, I>>(object: I): NotificationResponse {
    const message = createBaseNotificationResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseNotification(): Notification {
  return { id: "", userId: "", type: "", subject: "", body: "", recipient: "", isRead: false, createdAt: "" };
}

export const Notification: MessageFns<Notification> = {
  encode(message: Notification, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.body !== "") {
      writer.uint32(42).string(message.body);
    }
    if (message.recipient !== "") {
      writer.uint32(50).string(message.recipient);
    }
    if (message.isRead !== false) {
      writer.uint32(56).bool(message.isRead);
    }
    if (message.createdAt !== "") {
      writer.uint32(66).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Notification {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.body = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.recipient = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isRead = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Notification {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      body: isSet(object.body) ? globalThis.String(object.body) : "",
      recipient: isSet(object.recipient) ? globalThis.String(object.recipient) : "",
      isRead: isSet(object.isRead) ? globalThis.Boolean(object.isRead) : false,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
    };
  },

  toJSON(message: Notification): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.body !== "") {
      obj.body = message.body;
    }
    if (message.recipient !== "") {
      obj.recipient = message.recipient;
    }
    if (message.isRead !== false) {
      obj.isRead = message.isRead;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Notification>, I>>(base?: I): Notification {
    return Notification.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Notification>, I>>(object: I): Notification {
    const message = createBaseNotification();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    message.type = object.type ?? "";
    message.subject = object.subject ?? "";
    message.body = object.body ?? "";
    message.recipient = object.recipient ?? "";
    message.isRead = object.isRead ?? false;
    message.createdAt = object.createdAt ?? "";
    return message;
  },
};

function createBaseGetAllNotificationsResponse(): GetAllNotificationsResponse {
  return { notifications: [], total: 0, page: 0, pageSize: 0 };
}

export const GetAllNotificationsResponse: MessageFns<GetAllNotificationsResponse> = {
  encode(message: GetAllNotificationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.notifications) {
      Notification.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.total !== 0) {
      writer.uint32(16).int32(message.total);
    }
    if (message.page !== 0) {
      writer.uint32(24).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllNotificationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllNotificationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.notifications.push(Notification.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.total = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllNotificationsResponse {
    return {
      notifications: globalThis.Array.isArray(object?.notifications)
        ? object.notifications.map((e: any) => Notification.fromJSON(e))
        : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: GetAllNotificationsResponse): unknown {
    const obj: any = {};
    if (message.notifications?.length) {
      obj.notifications = message.notifications.map((e) => Notification.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllNotificationsResponse>, I>>(base?: I): GetAllNotificationsResponse {
    return GetAllNotificationsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllNotificationsResponse>, I>>(object: I): GetAllNotificationsResponse {
    const message = createBaseGetAllNotificationsResponse();
    message.notifications = object.notifications?.map((e) => Notification.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

export type NotificationServiceService = typeof NotificationServiceService;
export const NotificationServiceService = {
  sendOtp: {
    path: "/notification.NotificationService/SendOTP",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: OTPRequest) => Buffer.from(OTPRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => OTPRequest.decode(value),
    responseSerialize: (value: NotificationResponse) => Buffer.from(NotificationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => NotificationResponse.decode(value),
  },
  verifyOtp: {
    path: "/notification.NotificationService/VerifyOTP",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: VerifyOTPRequest) => Buffer.from(VerifyOTPRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => VerifyOTPRequest.decode(value),
    responseSerialize: (value: NotificationResponse) => Buffer.from(NotificationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => NotificationResponse.decode(value),
  },
  forgotPassword: {
    path: "/notification.NotificationService/ForgotPassword",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ForgotPasswordRequest) => Buffer.from(ForgotPasswordRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ForgotPasswordRequest.decode(value),
    responseSerialize: (value: NotificationResponse) => Buffer.from(NotificationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => NotificationResponse.decode(value),
  },
  getANotification: {
    path: "/notification.NotificationService/GetANotification",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetNotificationRequest) => Buffer.from(GetNotificationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetNotificationRequest.decode(value),
    responseSerialize: (value: Notification) => Buffer.from(Notification.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Notification.decode(value),
  },
  getAllNotifications: {
    path: "/notification.NotificationService/GetAllNotifications",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllNotificationsRequest) =>
      Buffer.from(GetAllNotificationsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetAllNotificationsRequest.decode(value),
    responseSerialize: (value: GetAllNotificationsResponse) =>
      Buffer.from(GetAllNotificationsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetAllNotificationsResponse.decode(value),
  },
  markAsRead: {
    path: "/notification.NotificationService/MarkAsRead",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MarkNotificationRequest) => Buffer.from(MarkNotificationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => MarkNotificationRequest.decode(value),
    responseSerialize: (value: NotificationResponse) => Buffer.from(NotificationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => NotificationResponse.decode(value),
  },
  markAllAsRead: {
    path: "/notification.NotificationService/MarkAllAsRead",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MarkAllNotificationsRequest) =>
      Buffer.from(MarkAllNotificationsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => MarkAllNotificationsRequest.decode(value),
    responseSerialize: (value: NotificationResponse) => Buffer.from(NotificationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => NotificationResponse.decode(value),
  },
} as const;

export interface NotificationServiceServer extends UntypedServiceImplementation {
  sendOtp: handleUnaryCall<OTPRequest, NotificationResponse>;
  verifyOtp: handleUnaryCall<VerifyOTPRequest, NotificationResponse>;
  forgotPassword: handleUnaryCall<ForgotPasswordRequest, NotificationResponse>;
  getANotification: handleUnaryCall<GetNotificationRequest, Notification>;
  getAllNotifications: handleUnaryCall<GetAllNotificationsRequest, GetAllNotificationsResponse>;
  markAsRead: handleUnaryCall<MarkNotificationRequest, NotificationResponse>;
  markAllAsRead: handleUnaryCall<MarkAllNotificationsRequest, NotificationResponse>;
}

export interface NotificationServiceClient extends Client {
  sendOtp(
    request: OTPRequest,
    callback: (error: ServiceError | null, response: NotificationResponse) => void,
  ): ClientUnaryCall;
  sendOtp(
    request: OTPRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: NotificationResponse) => void,
  ): ClientUnaryCall;
  sendOtp(
    request: OTPRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: NotificationResponse) => void,
  ): ClientUnaryCall;
  verifyOtp(
    request: VerifyOTPRequest,
    callback: (error: ServiceError | null, response: NotificationResponse) => void,
  ): ClientUnaryCall;
  verifyOtp(
    request: VerifyOTPRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: NotificationResponse) => void,
  ): ClientUnaryCall;
  verifyOtp(
    request: VerifyOTPRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: NotificationResponse) => void,
  ): ClientUnaryCall;
  forgotPassword(
    request: ForgotPasswordRequest,
    callback: (error: ServiceError | null, response: NotificationResponse) => void,
  ): ClientUnaryCall;
  forgotPassword(
    request: ForgotPasswordRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: NotificationResponse) => void,
  ): ClientUnaryCall;
  forgotPassword(
    request: ForgotPasswordRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: NotificationResponse) => void,
  ): ClientUnaryCall;
  getANotification(
    request: GetNotificationRequest,
    callback: (error: ServiceError | null, response: Notification) => void,
  ): ClientUnaryCall;
  getANotification(
    request: GetNotificationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Notification) => void,
  ): ClientUnaryCall;
  getANotification(
    request: GetNotificationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Notification) => void,
  ): ClientUnaryCall;
  getAllNotifications(
    request: GetAllNotificationsRequest,
    callback: (error: ServiceError | null, response: GetAllNotificationsResponse) => void,
  ): ClientUnaryCall;
  getAllNotifications(
    request: GetAllNotificationsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAllNotificationsResponse) => void,
  ): ClientUnaryCall;
  getAllNotifications(
    request: GetAllNotificationsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAllNotificationsResponse) => void,
  ): ClientUnaryCall;
  markAsRead(
    request: MarkNotificationRequest,
    callback: (error: ServiceError | null, response: NotificationResponse) => void,
  ): ClientUnaryCall;
  markAsRead(
    request: MarkNotificationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: NotificationResponse) => void,
  ): ClientUnaryCall;
  markAsRead(
    request: MarkNotificationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: NotificationResponse) => void,
  ): ClientUnaryCall;
  markAllAsRead(
    request: MarkAllNotificationsRequest,
    callback: (error: ServiceError | null, response: NotificationResponse) => void,
  ): ClientUnaryCall;
  markAllAsRead(
    request: MarkAllNotificationsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: NotificationResponse) => void,
  ): ClientUnaryCall;
  markAllAsRead(
    request: MarkAllNotificationsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: NotificationResponse) => void,
  ): ClientUnaryCall;
}

export const NotificationServiceClient = makeGenericClientConstructor(
  NotificationServiceService,
  "notification.NotificationService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): NotificationServiceClient;
  service: typeof NotificationServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
