// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.32.1
// source: user_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "user_service";

export interface UserProfileData {
  bio?: string | undefined;
  phone?: string | undefined;
  country?: string | undefined;
  city?: string | undefined;
  gender?: string | undefined;
  preference?: string | undefined;
  language?: string | undefined;
  website?: string | undefined;
}

export interface UserSocialsData {
  provider: string;
  profileUrl: string;
  providerUserUrl?: string | undefined;
}

export interface InstructorProfileData {
  bio?: string | undefined;
  headline?: string | undefined;
  experience?: string | undefined;
  certificate?: string | undefined;
  tags: string[];
  expertise: string[];
  rating: number;
  totalRatings: number;
  totalCourses: number;
  totalStudents: number;
}

/** Common User Information */
export interface UserData {
  id: string;
  email: string;
  role: string;
  firstName: string;
  status: string;
  lastName?: string | undefined;
  avatar?: string | undefined;
  lastLogin?: string | undefined;
  profile?: UserProfileData | undefined;
  instructorProfile?: InstructorProfileData | undefined;
  socials: UserSocialsData[];
  updatedAt?: string | undefined;
  createdAt?: string | undefined;
}

/** Common Pagination Request */
export interface PaginationRequest {
  page: number;
  pageSize: number;
}

/** Common Pagination Response */
export interface PaginationResponse {
  totalItems: number;
  totalPages: number;
}

/** Generic Error Message */
export interface Error {
  /** e.g., "RESOURCE_NOT_FOUND", "INVALID_ARGUMENT", "UNAUTHENTICATED" */
  code: string;
  message: string;
  /** Optional detailed error information */
  details: ErrorDetail[];
}

export interface ErrorDetail {
  field?: string | undefined;
  message: string;
}

export interface WalletTransaction {
  transactionId: string;
  userId: string;
  amount: number;
  /** e.g., "deposit", "withdrawal", "purchase" */
  type: string;
  transactionDate: string;
}

/** Cart Transaction Message */
export interface CartData {
  id: string;
  userId: string;
  total: number;
  items: CartItemData[];
  updatedAt: string;
  createdAt: string;
}

export interface CartItemData {
  id: string;
  courseId: string;
  createdAt: string;
}

export interface WishlistItemData {
  id: string;
  courseId: string;
  createdAt: string;
}

export interface WishlistData {
  id: string;
  userId: string;
  total: number;
  items: CartItemData[];
  updatedAt: string;
  createdAt: string;
}

/** Cart Operations */
export interface AddToCartRequest {
  userId: string;
  cartId: string;
  courseId: string;
}

export interface ToggleWishlistItemRequest {
  userId: string;
  wishlistId: string;
  courseId: string;
}

export interface ToggleCartItemRequest {
  userId: string;
  cartId: string;
  courseId: string;
}

export interface AddToCartResponse {
  item?: CartItemData | undefined;
  error?: Error | undefined;
}

export interface ToggleWishlistItemResponse {
  item?: WishlistItemData | undefined;
  error?: Error | undefined;
}

export interface ToggleCartItemResponse {
  item?: CartItemData | undefined;
  error?: Error | undefined;
}

export interface RemoveFromCartRequest {
  cartId: string;
  courseId: string;
}

export interface RemoveFromCartResponse {
  success?: RemoveSuccess | undefined;
  error?: Error | undefined;
}

export interface RemoveSuccess {
  removed: boolean;
}

export interface ListCartRequest {
  userId: string;
  pagination: PaginationRequest | undefined;
}

export interface ListCartResponse {
  success?: CartListSuccess | undefined;
  error?: Error | undefined;
}

export interface CartListSuccess {
  cart: CartData | undefined;
  pagination: PaginationResponse | undefined;
}

export interface WishlistListSuccess {
  wishlist: WishlistData | undefined;
  pagination: PaginationResponse | undefined;
}

/** Wishlist Operations */
export interface AddToWishlistRequest {
  userId: string;
  wishlistId: string;
  courseId: string;
}

export interface AddToWishlistResponse {
  item?: WishlistItemData | undefined;
  error?: Error | undefined;
}

export interface RemoveFromWishlistRequest {
  wishlistId: string;
  courseId: string;
}

export interface RemoveFromWishlistResponse {
  success?: RemoveSuccess | undefined;
  error?: Error | undefined;
}

export interface ListWishlistRequest {
  userId: string;
  pagination: PaginationRequest | undefined;
}

export interface ListWishlistResponse {
  success?: WishlistSuccess | undefined;
  error?: Error | undefined;
}

export interface WishlistSuccess {
  wishlist: WishlistData | undefined;
  pagination: PaginationResponse | undefined;
}

export interface InstructorSuccessResponse {
  user: UserData | undefined;
}

export interface RegisterInstructorResponse {
  error?: Error | undefined;
  success?: InstructorSuccessResponse | undefined;
}

export interface RegisterInstructorRequest {
  userId: string;
  extraEmail?: string | undefined;
  city?: string | undefined;
  firstName: string;
  lastName: string;
  expertise?: string | undefined;
  phone?: string | undefined;
  linkedin?: string | undefined;
  instagram?: string | undefined;
  facebook?: string | undefined;
  language?: string | undefined;
  website?: string | undefined;
  biography?: string | undefined;
  headline?: string | undefined;
  education?: string | undefined;
  experience?: number | undefined;
  country?: string | undefined;
}

export interface DetailedUserInfo {
  userId: string;
  firstName?: string | undefined;
  lastName?: string | undefined;
  phone?: string | undefined;
  headline?: string | undefined;
  biography?: string | undefined;
  avatar?: string | undefined;
  website?: string | undefined;
  language?: string | undefined;
  facebook?: string | undefined;
  instagram?: string | undefined;
  linkedin?: string | undefined;
  status: string;
  role: string;
  email: string;
  updatedAt: string;
  createdAt: string;
}

/** Update User Details */
export interface UpdateUserDetailsRequest {
  userId: string;
  firstName: string;
  lastName?: string | undefined;
  phone?: string | undefined;
  socials: UserSocialsData[];
  biography?: string | undefined;
  avatar?: string | undefined;
  website?: string | undefined;
  language?: string | undefined;
  city?: string | undefined;
  country?: string | undefined;
  gender?: string | undefined;
}

export interface UpdateUserDetailsResponse {
  user?: UserData | undefined;
  error?: Error | undefined;
}

/** Change Password */
export interface ChangePasswordRequest {
  userId: string;
  oldPassword: string;
  newPassword: string;
}

export interface ChangePasswordResponse {
  success?: ChangePasswordSuccess | undefined;
  error?: Error | undefined;
}

export interface ChangePasswordSuccess {
  updated: boolean;
}

/** Get Wallet Transactions */
export interface GetWalletTransactionsRequest {
  userId: string;
  pagination: PaginationRequest | undefined;
}

export interface GetWalletTransactionsResponse {
  success?: WalletTransactionsSuccess | undefined;
  error?: Error | undefined;
}

export interface WalletTransactionsSuccess {
  transactions: WalletTransaction[];
  pagination: PaginationResponse | undefined;
}

/** Get All Users */
export interface GetAllUsersRequest {
  pagination: PaginationRequest | undefined;
}

export interface GetAllUserEmailsRequest {
}

export interface GetAllUsersResponse {
  success?: AllUsersSuccess | undefined;
  error?: Error | undefined;
}

export interface GetAllUserEmailsResponse {
  success?: AllUserEmailsSuccess | undefined;
  error?: Error | undefined;
}

export interface AllUserEmailsSuccess {
  email: string[];
}

export interface GetUsersByIdsResponse {
  success?: UsersResponse | undefined;
  error?: Error | undefined;
}

export interface UsersResponse {
  users: UserData[];
}

export interface AllUsersSuccess {
  users: UserData[];
  pagination: PaginationResponse | undefined;
}

/** Get User By ID */
export interface GetUserRequest {
  userId: string;
}

/** Get Users By IDs */
export interface GetUsersByIdsRequest {
  userIds: string[];
}

export interface GetCurrentUserRequest {
  userId: string;
}

export interface CheckUserByEmailRequest {
  email: string;
}

export interface EmailExist {
  success: string;
  error: string;
}

export interface CheckUserByEmailResponse {
  response?: EmailExist | undefined;
  error?: Error | undefined;
}

export interface GetCurrentUserResponse {
  user?: UserData | undefined;
  error?: Error | undefined;
}

export interface GetUserResponse {
  user?: UserData | undefined;
  error?: Error | undefined;
}

/** Block User */
export interface BlockUserRequest {
  userId: string;
}

export interface UnBlockUserRequest {
  userId: string;
}

export interface BlockUserResponse {
  success?: BlockUserSuccess | undefined;
  error?: Error | undefined;
}

export interface UnBlockUserResponse {
  success?: UnBlockUserSuccess | undefined;
  error?: Error | undefined;
}

export interface BlockUserSuccess {
  updated: boolean;
}

export interface UnBlockUserSuccess {
  updated: boolean;
}

/** Get All Instructors */
export interface GetAllInstructorsRequest {
  pagination: PaginationRequest | undefined;
}

export interface GetAllInstructorsResponse {
  success?: AllInstructorsSuccess | undefined;
  error?: Error | undefined;
}

export interface AllInstructorsSuccess {
  instructors: UserData[];
  pagination: PaginationResponse | undefined;
}

function createBaseUserProfileData(): UserProfileData {
  return {
    bio: undefined,
    phone: undefined,
    country: undefined,
    city: undefined,
    gender: undefined,
    preference: undefined,
    language: undefined,
    website: undefined,
  };
}

export const UserProfileData: MessageFns<UserProfileData> = {
  encode(message: UserProfileData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bio !== undefined) {
      writer.uint32(10).string(message.bio);
    }
    if (message.phone !== undefined) {
      writer.uint32(18).string(message.phone);
    }
    if (message.country !== undefined) {
      writer.uint32(26).string(message.country);
    }
    if (message.city !== undefined) {
      writer.uint32(34).string(message.city);
    }
    if (message.gender !== undefined) {
      writer.uint32(42).string(message.gender);
    }
    if (message.preference !== undefined) {
      writer.uint32(50).string(message.preference);
    }
    if (message.language !== undefined) {
      writer.uint32(58).string(message.language);
    }
    if (message.website !== undefined) {
      writer.uint32(66).string(message.website);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserProfileData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserProfileData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.country = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.city = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.gender = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.preference = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.language = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.website = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserProfileData {
    return {
      bio: isSet(object.bio) ? globalThis.String(object.bio) : undefined,
      phone: isSet(object.phone) ? globalThis.String(object.phone) : undefined,
      country: isSet(object.country) ? globalThis.String(object.country) : undefined,
      city: isSet(object.city) ? globalThis.String(object.city) : undefined,
      gender: isSet(object.gender) ? globalThis.String(object.gender) : undefined,
      preference: isSet(object.preference) ? globalThis.String(object.preference) : undefined,
      language: isSet(object.language) ? globalThis.String(object.language) : undefined,
      website: isSet(object.website) ? globalThis.String(object.website) : undefined,
    };
  },

  toJSON(message: UserProfileData): unknown {
    const obj: any = {};
    if (message.bio !== undefined) {
      obj.bio = message.bio;
    }
    if (message.phone !== undefined) {
      obj.phone = message.phone;
    }
    if (message.country !== undefined) {
      obj.country = message.country;
    }
    if (message.city !== undefined) {
      obj.city = message.city;
    }
    if (message.gender !== undefined) {
      obj.gender = message.gender;
    }
    if (message.preference !== undefined) {
      obj.preference = message.preference;
    }
    if (message.language !== undefined) {
      obj.language = message.language;
    }
    if (message.website !== undefined) {
      obj.website = message.website;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserProfileData>, I>>(base?: I): UserProfileData {
    return UserProfileData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserProfileData>, I>>(object: I): UserProfileData {
    const message = createBaseUserProfileData();
    message.bio = object.bio ?? undefined;
    message.phone = object.phone ?? undefined;
    message.country = object.country ?? undefined;
    message.city = object.city ?? undefined;
    message.gender = object.gender ?? undefined;
    message.preference = object.preference ?? undefined;
    message.language = object.language ?? undefined;
    message.website = object.website ?? undefined;
    return message;
  },
};

function createBaseUserSocialsData(): UserSocialsData {
  return { provider: "", profileUrl: "", providerUserUrl: undefined };
}

export const UserSocialsData: MessageFns<UserSocialsData> = {
  encode(message: UserSocialsData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.provider !== "") {
      writer.uint32(10).string(message.provider);
    }
    if (message.profileUrl !== "") {
      writer.uint32(18).string(message.profileUrl);
    }
    if (message.providerUserUrl !== undefined) {
      writer.uint32(26).string(message.providerUserUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserSocialsData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserSocialsData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.provider = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.profileUrl = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.providerUserUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserSocialsData {
    return {
      provider: isSet(object.provider) ? globalThis.String(object.provider) : "",
      profileUrl: isSet(object.profileUrl) ? globalThis.String(object.profileUrl) : "",
      providerUserUrl: isSet(object.providerUserUrl) ? globalThis.String(object.providerUserUrl) : undefined,
    };
  },

  toJSON(message: UserSocialsData): unknown {
    const obj: any = {};
    if (message.provider !== "") {
      obj.provider = message.provider;
    }
    if (message.profileUrl !== "") {
      obj.profileUrl = message.profileUrl;
    }
    if (message.providerUserUrl !== undefined) {
      obj.providerUserUrl = message.providerUserUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserSocialsData>, I>>(base?: I): UserSocialsData {
    return UserSocialsData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserSocialsData>, I>>(object: I): UserSocialsData {
    const message = createBaseUserSocialsData();
    message.provider = object.provider ?? "";
    message.profileUrl = object.profileUrl ?? "";
    message.providerUserUrl = object.providerUserUrl ?? undefined;
    return message;
  },
};

function createBaseInstructorProfileData(): InstructorProfileData {
  return {
    bio: undefined,
    headline: undefined,
    experience: undefined,
    certificate: undefined,
    tags: [],
    expertise: [],
    rating: 0,
    totalRatings: 0,
    totalCourses: 0,
    totalStudents: 0,
  };
}

export const InstructorProfileData: MessageFns<InstructorProfileData> = {
  encode(message: InstructorProfileData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bio !== undefined) {
      writer.uint32(10).string(message.bio);
    }
    if (message.headline !== undefined) {
      writer.uint32(18).string(message.headline);
    }
    if (message.experience !== undefined) {
      writer.uint32(26).string(message.experience);
    }
    if (message.certificate !== undefined) {
      writer.uint32(34).string(message.certificate);
    }
    for (const v of message.tags) {
      writer.uint32(58).string(v!);
    }
    for (const v of message.expertise) {
      writer.uint32(42).string(v!);
    }
    if (message.rating !== 0) {
      writer.uint32(48).int32(message.rating);
    }
    if (message.totalRatings !== 0) {
      writer.uint32(64).int32(message.totalRatings);
    }
    if (message.totalCourses !== 0) {
      writer.uint32(72).int32(message.totalCourses);
    }
    if (message.totalStudents !== 0) {
      writer.uint32(80).int32(message.totalStudents);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InstructorProfileData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstructorProfileData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.headline = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.experience = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.certificate = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.expertise.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.rating = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.totalRatings = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.totalCourses = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.totalStudents = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InstructorProfileData {
    return {
      bio: isSet(object.bio) ? globalThis.String(object.bio) : undefined,
      headline: isSet(object.headline) ? globalThis.String(object.headline) : undefined,
      experience: isSet(object.experience) ? globalThis.String(object.experience) : undefined,
      certificate: isSet(object.certificate) ? globalThis.String(object.certificate) : undefined,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      expertise: globalThis.Array.isArray(object?.expertise)
        ? object.expertise.map((e: any) => globalThis.String(e))
        : [],
      rating: isSet(object.rating) ? globalThis.Number(object.rating) : 0,
      totalRatings: isSet(object.totalRatings) ? globalThis.Number(object.totalRatings) : 0,
      totalCourses: isSet(object.totalCourses) ? globalThis.Number(object.totalCourses) : 0,
      totalStudents: isSet(object.totalStudents) ? globalThis.Number(object.totalStudents) : 0,
    };
  },

  toJSON(message: InstructorProfileData): unknown {
    const obj: any = {};
    if (message.bio !== undefined) {
      obj.bio = message.bio;
    }
    if (message.headline !== undefined) {
      obj.headline = message.headline;
    }
    if (message.experience !== undefined) {
      obj.experience = message.experience;
    }
    if (message.certificate !== undefined) {
      obj.certificate = message.certificate;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.expertise?.length) {
      obj.expertise = message.expertise;
    }
    if (message.rating !== 0) {
      obj.rating = Math.round(message.rating);
    }
    if (message.totalRatings !== 0) {
      obj.totalRatings = Math.round(message.totalRatings);
    }
    if (message.totalCourses !== 0) {
      obj.totalCourses = Math.round(message.totalCourses);
    }
    if (message.totalStudents !== 0) {
      obj.totalStudents = Math.round(message.totalStudents);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InstructorProfileData>, I>>(base?: I): InstructorProfileData {
    return InstructorProfileData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InstructorProfileData>, I>>(object: I): InstructorProfileData {
    const message = createBaseInstructorProfileData();
    message.bio = object.bio ?? undefined;
    message.headline = object.headline ?? undefined;
    message.experience = object.experience ?? undefined;
    message.certificate = object.certificate ?? undefined;
    message.tags = object.tags?.map((e) => e) || [];
    message.expertise = object.expertise?.map((e) => e) || [];
    message.rating = object.rating ?? 0;
    message.totalRatings = object.totalRatings ?? 0;
    message.totalCourses = object.totalCourses ?? 0;
    message.totalStudents = object.totalStudents ?? 0;
    return message;
  },
};

function createBaseUserData(): UserData {
  return {
    id: "",
    email: "",
    role: "",
    firstName: "",
    status: "",
    lastName: undefined,
    avatar: undefined,
    lastLogin: undefined,
    profile: undefined,
    instructorProfile: undefined,
    socials: [],
    updatedAt: undefined,
    createdAt: undefined,
  };
}

export const UserData: MessageFns<UserData> = {
  encode(message: UserData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.role !== "") {
      writer.uint32(26).string(message.role);
    }
    if (message.firstName !== "") {
      writer.uint32(34).string(message.firstName);
    }
    if (message.status !== "") {
      writer.uint32(42).string(message.status);
    }
    if (message.lastName !== undefined) {
      writer.uint32(74).string(message.lastName);
    }
    if (message.avatar !== undefined) {
      writer.uint32(50).string(message.avatar);
    }
    if (message.lastLogin !== undefined) {
      writer.uint32(58).string(message.lastLogin);
    }
    if (message.profile !== undefined) {
      UserProfileData.encode(message.profile, writer.uint32(66).fork()).join();
    }
    if (message.instructorProfile !== undefined) {
      InstructorProfileData.encode(message.instructorProfile, writer.uint32(82).fork()).join();
    }
    for (const v of message.socials) {
      UserSocialsData.encode(v!, writer.uint32(90).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      writer.uint32(98).string(message.updatedAt);
    }
    if (message.createdAt !== undefined) {
      writer.uint32(106).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.avatar = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.lastLogin = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.profile = UserProfileData.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.instructorProfile = InstructorProfileData.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.socials.push(UserSocialsData.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserData {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : undefined,
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : undefined,
      lastLogin: isSet(object.lastLogin) ? globalThis.String(object.lastLogin) : undefined,
      profile: isSet(object.profile) ? UserProfileData.fromJSON(object.profile) : undefined,
      instructorProfile: isSet(object.instructorProfile)
        ? InstructorProfileData.fromJSON(object.instructorProfile)
        : undefined,
      socials: globalThis.Array.isArray(object?.socials)
        ? object.socials.map((e: any) => UserSocialsData.fromJSON(e))
        : [],
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : undefined,
    };
  },

  toJSON(message: UserData): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.lastName !== undefined) {
      obj.lastName = message.lastName;
    }
    if (message.avatar !== undefined) {
      obj.avatar = message.avatar;
    }
    if (message.lastLogin !== undefined) {
      obj.lastLogin = message.lastLogin;
    }
    if (message.profile !== undefined) {
      obj.profile = UserProfileData.toJSON(message.profile);
    }
    if (message.instructorProfile !== undefined) {
      obj.instructorProfile = InstructorProfileData.toJSON(message.instructorProfile);
    }
    if (message.socials?.length) {
      obj.socials = message.socials.map((e) => UserSocialsData.toJSON(e));
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserData>, I>>(base?: I): UserData {
    return UserData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserData>, I>>(object: I): UserData {
    const message = createBaseUserData();
    message.id = object.id ?? "";
    message.email = object.email ?? "";
    message.role = object.role ?? "";
    message.firstName = object.firstName ?? "";
    message.status = object.status ?? "";
    message.lastName = object.lastName ?? undefined;
    message.avatar = object.avatar ?? undefined;
    message.lastLogin = object.lastLogin ?? undefined;
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? UserProfileData.fromPartial(object.profile)
      : undefined;
    message.instructorProfile = (object.instructorProfile !== undefined && object.instructorProfile !== null)
      ? InstructorProfileData.fromPartial(object.instructorProfile)
      : undefined;
    message.socials = object.socials?.map((e) => UserSocialsData.fromPartial(e)) || [];
    message.updatedAt = object.updatedAt ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    return message;
  },
};

function createBasePaginationRequest(): PaginationRequest {
  return { page: 0, pageSize: 0 };
}

export const PaginationRequest: MessageFns<PaginationRequest> = {
  encode(message: PaginationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaginationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaginationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaginationRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: PaginationRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaginationRequest>, I>>(base?: I): PaginationRequest {
    return PaginationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaginationRequest>, I>>(object: I): PaginationRequest {
    const message = createBasePaginationRequest();
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBasePaginationResponse(): PaginationResponse {
  return { totalItems: 0, totalPages: 0 };
}

export const PaginationResponse: MessageFns<PaginationResponse> = {
  encode(message: PaginationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.totalItems !== 0) {
      writer.uint32(8).int32(message.totalItems);
    }
    if (message.totalPages !== 0) {
      writer.uint32(16).int32(message.totalPages);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaginationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaginationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.totalItems = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalPages = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaginationResponse {
    return {
      totalItems: isSet(object.totalItems) ? globalThis.Number(object.totalItems) : 0,
      totalPages: isSet(object.totalPages) ? globalThis.Number(object.totalPages) : 0,
    };
  },

  toJSON(message: PaginationResponse): unknown {
    const obj: any = {};
    if (message.totalItems !== 0) {
      obj.totalItems = Math.round(message.totalItems);
    }
    if (message.totalPages !== 0) {
      obj.totalPages = Math.round(message.totalPages);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaginationResponse>, I>>(base?: I): PaginationResponse {
    return PaginationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaginationResponse>, I>>(object: I): PaginationResponse {
    const message = createBasePaginationResponse();
    message.totalItems = object.totalItems ?? 0;
    message.totalPages = object.totalPages ?? 0;
    return message;
  },
};

function createBaseError(): Error {
  return { code: "", message: "", details: [] };
}

export const Error: MessageFns<Error> = {
  encode(message: Error, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== "") {
      writer.uint32(10).string(message.code);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    for (const v of message.details) {
      ErrorDetail.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Error {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.details.push(ErrorDetail.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Error {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      details: globalThis.Array.isArray(object?.details) ? object.details.map((e: any) => ErrorDetail.fromJSON(e)) : [],
    };
  },

  toJSON(message: Error): unknown {
    const obj: any = {};
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.details?.length) {
      obj.details = message.details.map((e) => ErrorDetail.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Error>, I>>(base?: I): Error {
    return Error.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Error>, I>>(object: I): Error {
    const message = createBaseError();
    message.code = object.code ?? "";
    message.message = object.message ?? "";
    message.details = object.details?.map((e) => ErrorDetail.fromPartial(e)) || [];
    return message;
  },
};

function createBaseErrorDetail(): ErrorDetail {
  return { field: undefined, message: "" };
}

export const ErrorDetail: MessageFns<ErrorDetail> = {
  encode(message: ErrorDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field !== undefined) {
      writer.uint32(10).string(message.field);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ErrorDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrorDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.field = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ErrorDetail {
    return {
      field: isSet(object.field) ? globalThis.String(object.field) : undefined,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: ErrorDetail): unknown {
    const obj: any = {};
    if (message.field !== undefined) {
      obj.field = message.field;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ErrorDetail>, I>>(base?: I): ErrorDetail {
    return ErrorDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ErrorDetail>, I>>(object: I): ErrorDetail {
    const message = createBaseErrorDetail();
    message.field = object.field ?? undefined;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseWalletTransaction(): WalletTransaction {
  return { transactionId: "", userId: "", amount: 0, type: "", transactionDate: "" };
}

export const WalletTransaction: MessageFns<WalletTransaction> = {
  encode(message: WalletTransaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transactionId !== "") {
      writer.uint32(10).string(message.transactionId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.amount !== 0) {
      writer.uint32(25).double(message.amount);
    }
    if (message.type !== "") {
      writer.uint32(34).string(message.type);
    }
    if (message.transactionDate !== "") {
      writer.uint32(42).string(message.transactionDate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WalletTransaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWalletTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transactionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.amount = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.transactionDate = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WalletTransaction {
    return {
      transactionId: isSet(object.transactionId) ? globalThis.String(object.transactionId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      transactionDate: isSet(object.transactionDate) ? globalThis.String(object.transactionDate) : "",
    };
  },

  toJSON(message: WalletTransaction): unknown {
    const obj: any = {};
    if (message.transactionId !== "") {
      obj.transactionId = message.transactionId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.transactionDate !== "") {
      obj.transactionDate = message.transactionDate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WalletTransaction>, I>>(base?: I): WalletTransaction {
    return WalletTransaction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WalletTransaction>, I>>(object: I): WalletTransaction {
    const message = createBaseWalletTransaction();
    message.transactionId = object.transactionId ?? "";
    message.userId = object.userId ?? "";
    message.amount = object.amount ?? 0;
    message.type = object.type ?? "";
    message.transactionDate = object.transactionDate ?? "";
    return message;
  },
};

function createBaseCartData(): CartData {
  return { id: "", userId: "", total: 0, items: [], updatedAt: "", createdAt: "" };
}

export const CartData: MessageFns<CartData> = {
  encode(message: CartData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.total !== 0) {
      writer.uint32(24).int32(message.total);
    }
    for (const v of message.items) {
      CartItemData.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.updatedAt !== "") {
      writer.uint32(42).string(message.updatedAt);
    }
    if (message.createdAt !== "") {
      writer.uint32(50).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CartData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCartData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.total = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.items.push(CartItemData.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CartData {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => CartItemData.fromJSON(e)) : [],
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
    };
  },

  toJSON(message: CartData): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => CartItemData.toJSON(e));
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CartData>, I>>(base?: I): CartData {
    return CartData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CartData>, I>>(object: I): CartData {
    const message = createBaseCartData();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    message.total = object.total ?? 0;
    message.items = object.items?.map((e) => CartItemData.fromPartial(e)) || [];
    message.updatedAt = object.updatedAt ?? "";
    message.createdAt = object.createdAt ?? "";
    return message;
  },
};

function createBaseCartItemData(): CartItemData {
  return { id: "", courseId: "", createdAt: "" };
}

export const CartItemData: MessageFns<CartItemData> = {
  encode(message: CartItemData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.courseId !== "") {
      writer.uint32(26).string(message.courseId);
    }
    if (message.createdAt !== "") {
      writer.uint32(50).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CartItemData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCartItemData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.courseId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CartItemData {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      courseId: isSet(object.courseId) ? globalThis.String(object.courseId) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
    };
  },

  toJSON(message: CartItemData): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.courseId !== "") {
      obj.courseId = message.courseId;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CartItemData>, I>>(base?: I): CartItemData {
    return CartItemData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CartItemData>, I>>(object: I): CartItemData {
    const message = createBaseCartItemData();
    message.id = object.id ?? "";
    message.courseId = object.courseId ?? "";
    message.createdAt = object.createdAt ?? "";
    return message;
  },
};

function createBaseWishlistItemData(): WishlistItemData {
  return { id: "", courseId: "", createdAt: "" };
}

export const WishlistItemData: MessageFns<WishlistItemData> = {
  encode(message: WishlistItemData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.courseId !== "") {
      writer.uint32(26).string(message.courseId);
    }
    if (message.createdAt !== "") {
      writer.uint32(50).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WishlistItemData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWishlistItemData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.courseId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WishlistItemData {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      courseId: isSet(object.courseId) ? globalThis.String(object.courseId) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
    };
  },

  toJSON(message: WishlistItemData): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.courseId !== "") {
      obj.courseId = message.courseId;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WishlistItemData>, I>>(base?: I): WishlistItemData {
    return WishlistItemData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WishlistItemData>, I>>(object: I): WishlistItemData {
    const message = createBaseWishlistItemData();
    message.id = object.id ?? "";
    message.courseId = object.courseId ?? "";
    message.createdAt = object.createdAt ?? "";
    return message;
  },
};

function createBaseWishlistData(): WishlistData {
  return { id: "", userId: "", total: 0, items: [], updatedAt: "", createdAt: "" };
}

export const WishlistData: MessageFns<WishlistData> = {
  encode(message: WishlistData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.total !== 0) {
      writer.uint32(24).int32(message.total);
    }
    for (const v of message.items) {
      CartItemData.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.updatedAt !== "") {
      writer.uint32(42).string(message.updatedAt);
    }
    if (message.createdAt !== "") {
      writer.uint32(50).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WishlistData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWishlistData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.total = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.items.push(CartItemData.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WishlistData {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => CartItemData.fromJSON(e)) : [],
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
    };
  },

  toJSON(message: WishlistData): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => CartItemData.toJSON(e));
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WishlistData>, I>>(base?: I): WishlistData {
    return WishlistData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WishlistData>, I>>(object: I): WishlistData {
    const message = createBaseWishlistData();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    message.total = object.total ?? 0;
    message.items = object.items?.map((e) => CartItemData.fromPartial(e)) || [];
    message.updatedAt = object.updatedAt ?? "";
    message.createdAt = object.createdAt ?? "";
    return message;
  },
};

function createBaseAddToCartRequest(): AddToCartRequest {
  return { userId: "", cartId: "", courseId: "" };
}

export const AddToCartRequest: MessageFns<AddToCartRequest> = {
  encode(message: AddToCartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.cartId !== "") {
      writer.uint32(26).string(message.cartId);
    }
    if (message.courseId !== "") {
      writer.uint32(18).string(message.courseId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddToCartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddToCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.cartId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.courseId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddToCartRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      cartId: isSet(object.cartId) ? globalThis.String(object.cartId) : "",
      courseId: isSet(object.courseId) ? globalThis.String(object.courseId) : "",
    };
  },

  toJSON(message: AddToCartRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.cartId !== "") {
      obj.cartId = message.cartId;
    }
    if (message.courseId !== "") {
      obj.courseId = message.courseId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddToCartRequest>, I>>(base?: I): AddToCartRequest {
    return AddToCartRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddToCartRequest>, I>>(object: I): AddToCartRequest {
    const message = createBaseAddToCartRequest();
    message.userId = object.userId ?? "";
    message.cartId = object.cartId ?? "";
    message.courseId = object.courseId ?? "";
    return message;
  },
};

function createBaseToggleWishlistItemRequest(): ToggleWishlistItemRequest {
  return { userId: "", wishlistId: "", courseId: "" };
}

export const ToggleWishlistItemRequest: MessageFns<ToggleWishlistItemRequest> = {
  encode(message: ToggleWishlistItemRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.wishlistId !== "") {
      writer.uint32(26).string(message.wishlistId);
    }
    if (message.courseId !== "") {
      writer.uint32(18).string(message.courseId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ToggleWishlistItemRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToggleWishlistItemRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.wishlistId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.courseId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ToggleWishlistItemRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      wishlistId: isSet(object.wishlistId) ? globalThis.String(object.wishlistId) : "",
      courseId: isSet(object.courseId) ? globalThis.String(object.courseId) : "",
    };
  },

  toJSON(message: ToggleWishlistItemRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.wishlistId !== "") {
      obj.wishlistId = message.wishlistId;
    }
    if (message.courseId !== "") {
      obj.courseId = message.courseId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ToggleWishlistItemRequest>, I>>(base?: I): ToggleWishlistItemRequest {
    return ToggleWishlistItemRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ToggleWishlistItemRequest>, I>>(object: I): ToggleWishlistItemRequest {
    const message = createBaseToggleWishlistItemRequest();
    message.userId = object.userId ?? "";
    message.wishlistId = object.wishlistId ?? "";
    message.courseId = object.courseId ?? "";
    return message;
  },
};

function createBaseToggleCartItemRequest(): ToggleCartItemRequest {
  return { userId: "", cartId: "", courseId: "" };
}

export const ToggleCartItemRequest: MessageFns<ToggleCartItemRequest> = {
  encode(message: ToggleCartItemRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.cartId !== "") {
      writer.uint32(26).string(message.cartId);
    }
    if (message.courseId !== "") {
      writer.uint32(18).string(message.courseId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ToggleCartItemRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToggleCartItemRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.cartId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.courseId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ToggleCartItemRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      cartId: isSet(object.cartId) ? globalThis.String(object.cartId) : "",
      courseId: isSet(object.courseId) ? globalThis.String(object.courseId) : "",
    };
  },

  toJSON(message: ToggleCartItemRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.cartId !== "") {
      obj.cartId = message.cartId;
    }
    if (message.courseId !== "") {
      obj.courseId = message.courseId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ToggleCartItemRequest>, I>>(base?: I): ToggleCartItemRequest {
    return ToggleCartItemRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ToggleCartItemRequest>, I>>(object: I): ToggleCartItemRequest {
    const message = createBaseToggleCartItemRequest();
    message.userId = object.userId ?? "";
    message.cartId = object.cartId ?? "";
    message.courseId = object.courseId ?? "";
    return message;
  },
};

function createBaseAddToCartResponse(): AddToCartResponse {
  return { item: undefined, error: undefined };
}

export const AddToCartResponse: MessageFns<AddToCartResponse> = {
  encode(message: AddToCartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.item !== undefined) {
      CartItemData.encode(message.item, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddToCartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddToCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.item = CartItemData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddToCartResponse {
    return {
      item: isSet(object.item) ? CartItemData.fromJSON(object.item) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: AddToCartResponse): unknown {
    const obj: any = {};
    if (message.item !== undefined) {
      obj.item = CartItemData.toJSON(message.item);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddToCartResponse>, I>>(base?: I): AddToCartResponse {
    return AddToCartResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddToCartResponse>, I>>(object: I): AddToCartResponse {
    const message = createBaseAddToCartResponse();
    message.item = (object.item !== undefined && object.item !== null)
      ? CartItemData.fromPartial(object.item)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseToggleWishlistItemResponse(): ToggleWishlistItemResponse {
  return { item: undefined, error: undefined };
}

export const ToggleWishlistItemResponse: MessageFns<ToggleWishlistItemResponse> = {
  encode(message: ToggleWishlistItemResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.item !== undefined) {
      WishlistItemData.encode(message.item, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ToggleWishlistItemResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToggleWishlistItemResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.item = WishlistItemData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ToggleWishlistItemResponse {
    return {
      item: isSet(object.item) ? WishlistItemData.fromJSON(object.item) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ToggleWishlistItemResponse): unknown {
    const obj: any = {};
    if (message.item !== undefined) {
      obj.item = WishlistItemData.toJSON(message.item);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ToggleWishlistItemResponse>, I>>(base?: I): ToggleWishlistItemResponse {
    return ToggleWishlistItemResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ToggleWishlistItemResponse>, I>>(object: I): ToggleWishlistItemResponse {
    const message = createBaseToggleWishlistItemResponse();
    message.item = (object.item !== undefined && object.item !== null)
      ? WishlistItemData.fromPartial(object.item)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseToggleCartItemResponse(): ToggleCartItemResponse {
  return { item: undefined, error: undefined };
}

export const ToggleCartItemResponse: MessageFns<ToggleCartItemResponse> = {
  encode(message: ToggleCartItemResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.item !== undefined) {
      CartItemData.encode(message.item, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ToggleCartItemResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToggleCartItemResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.item = CartItemData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ToggleCartItemResponse {
    return {
      item: isSet(object.item) ? CartItemData.fromJSON(object.item) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ToggleCartItemResponse): unknown {
    const obj: any = {};
    if (message.item !== undefined) {
      obj.item = CartItemData.toJSON(message.item);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ToggleCartItemResponse>, I>>(base?: I): ToggleCartItemResponse {
    return ToggleCartItemResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ToggleCartItemResponse>, I>>(object: I): ToggleCartItemResponse {
    const message = createBaseToggleCartItemResponse();
    message.item = (object.item !== undefined && object.item !== null)
      ? CartItemData.fromPartial(object.item)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseRemoveFromCartRequest(): RemoveFromCartRequest {
  return { cartId: "", courseId: "" };
}

export const RemoveFromCartRequest: MessageFns<RemoveFromCartRequest> = {
  encode(message: RemoveFromCartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cartId !== "") {
      writer.uint32(10).string(message.cartId);
    }
    if (message.courseId !== "") {
      writer.uint32(18).string(message.courseId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveFromCartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveFromCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cartId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.courseId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveFromCartRequest {
    return {
      cartId: isSet(object.cartId) ? globalThis.String(object.cartId) : "",
      courseId: isSet(object.courseId) ? globalThis.String(object.courseId) : "",
    };
  },

  toJSON(message: RemoveFromCartRequest): unknown {
    const obj: any = {};
    if (message.cartId !== "") {
      obj.cartId = message.cartId;
    }
    if (message.courseId !== "") {
      obj.courseId = message.courseId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveFromCartRequest>, I>>(base?: I): RemoveFromCartRequest {
    return RemoveFromCartRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveFromCartRequest>, I>>(object: I): RemoveFromCartRequest {
    const message = createBaseRemoveFromCartRequest();
    message.cartId = object.cartId ?? "";
    message.courseId = object.courseId ?? "";
    return message;
  },
};

function createBaseRemoveFromCartResponse(): RemoveFromCartResponse {
  return { success: undefined, error: undefined };
}

export const RemoveFromCartResponse: MessageFns<RemoveFromCartResponse> = {
  encode(message: RemoveFromCartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== undefined) {
      RemoveSuccess.encode(message.success, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveFromCartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveFromCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.success = RemoveSuccess.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveFromCartResponse {
    return {
      success: isSet(object.success) ? RemoveSuccess.fromJSON(object.success) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: RemoveFromCartResponse): unknown {
    const obj: any = {};
    if (message.success !== undefined) {
      obj.success = RemoveSuccess.toJSON(message.success);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveFromCartResponse>, I>>(base?: I): RemoveFromCartResponse {
    return RemoveFromCartResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveFromCartResponse>, I>>(object: I): RemoveFromCartResponse {
    const message = createBaseRemoveFromCartResponse();
    message.success = (object.success !== undefined && object.success !== null)
      ? RemoveSuccess.fromPartial(object.success)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseRemoveSuccess(): RemoveSuccess {
  return { removed: false };
}

export const RemoveSuccess: MessageFns<RemoveSuccess> = {
  encode(message: RemoveSuccess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.removed !== false) {
      writer.uint32(8).bool(message.removed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveSuccess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveSuccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.removed = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveSuccess {
    return { removed: isSet(object.removed) ? globalThis.Boolean(object.removed) : false };
  },

  toJSON(message: RemoveSuccess): unknown {
    const obj: any = {};
    if (message.removed !== false) {
      obj.removed = message.removed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveSuccess>, I>>(base?: I): RemoveSuccess {
    return RemoveSuccess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveSuccess>, I>>(object: I): RemoveSuccess {
    const message = createBaseRemoveSuccess();
    message.removed = object.removed ?? false;
    return message;
  },
};

function createBaseListCartRequest(): ListCartRequest {
  return { userId: "", pagination: undefined };
}

export const ListCartRequest: MessageFns<ListCartRequest> = {
  encode(message: ListCartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.pagination !== undefined) {
      PaginationRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PaginationRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCartRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      pagination: isSet(object.pagination) ? PaginationRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: ListCartRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PaginationRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListCartRequest>, I>>(base?: I): ListCartRequest {
    return ListCartRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListCartRequest>, I>>(object: I): ListCartRequest {
    const message = createBaseListCartRequest();
    message.userId = object.userId ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PaginationRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseListCartResponse(): ListCartResponse {
  return { success: undefined, error: undefined };
}

export const ListCartResponse: MessageFns<ListCartResponse> = {
  encode(message: ListCartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== undefined) {
      CartListSuccess.encode(message.success, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.success = CartListSuccess.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCartResponse {
    return {
      success: isSet(object.success) ? CartListSuccess.fromJSON(object.success) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ListCartResponse): unknown {
    const obj: any = {};
    if (message.success !== undefined) {
      obj.success = CartListSuccess.toJSON(message.success);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListCartResponse>, I>>(base?: I): ListCartResponse {
    return ListCartResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListCartResponse>, I>>(object: I): ListCartResponse {
    const message = createBaseListCartResponse();
    message.success = (object.success !== undefined && object.success !== null)
      ? CartListSuccess.fromPartial(object.success)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseCartListSuccess(): CartListSuccess {
  return { cart: undefined, pagination: undefined };
}

export const CartListSuccess: MessageFns<CartListSuccess> = {
  encode(message: CartListSuccess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cart !== undefined) {
      CartData.encode(message.cart, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PaginationResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CartListSuccess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCartListSuccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cart = CartData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PaginationResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CartListSuccess {
    return {
      cart: isSet(object.cart) ? CartData.fromJSON(object.cart) : undefined,
      pagination: isSet(object.pagination) ? PaginationResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: CartListSuccess): unknown {
    const obj: any = {};
    if (message.cart !== undefined) {
      obj.cart = CartData.toJSON(message.cart);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PaginationResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CartListSuccess>, I>>(base?: I): CartListSuccess {
    return CartListSuccess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CartListSuccess>, I>>(object: I): CartListSuccess {
    const message = createBaseCartListSuccess();
    message.cart = (object.cart !== undefined && object.cart !== null) ? CartData.fromPartial(object.cart) : undefined;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PaginationResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseWishlistListSuccess(): WishlistListSuccess {
  return { wishlist: undefined, pagination: undefined };
}

export const WishlistListSuccess: MessageFns<WishlistListSuccess> = {
  encode(message: WishlistListSuccess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.wishlist !== undefined) {
      WishlistData.encode(message.wishlist, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PaginationResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WishlistListSuccess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWishlistListSuccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.wishlist = WishlistData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PaginationResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WishlistListSuccess {
    return {
      wishlist: isSet(object.wishlist) ? WishlistData.fromJSON(object.wishlist) : undefined,
      pagination: isSet(object.pagination) ? PaginationResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: WishlistListSuccess): unknown {
    const obj: any = {};
    if (message.wishlist !== undefined) {
      obj.wishlist = WishlistData.toJSON(message.wishlist);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PaginationResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WishlistListSuccess>, I>>(base?: I): WishlistListSuccess {
    return WishlistListSuccess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WishlistListSuccess>, I>>(object: I): WishlistListSuccess {
    const message = createBaseWishlistListSuccess();
    message.wishlist = (object.wishlist !== undefined && object.wishlist !== null)
      ? WishlistData.fromPartial(object.wishlist)
      : undefined;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PaginationResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseAddToWishlistRequest(): AddToWishlistRequest {
  return { userId: "", wishlistId: "", courseId: "" };
}

export const AddToWishlistRequest: MessageFns<AddToWishlistRequest> = {
  encode(message: AddToWishlistRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.wishlistId !== "") {
      writer.uint32(26).string(message.wishlistId);
    }
    if (message.courseId !== "") {
      writer.uint32(18).string(message.courseId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddToWishlistRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddToWishlistRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.wishlistId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.courseId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddToWishlistRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      wishlistId: isSet(object.wishlistId) ? globalThis.String(object.wishlistId) : "",
      courseId: isSet(object.courseId) ? globalThis.String(object.courseId) : "",
    };
  },

  toJSON(message: AddToWishlistRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.wishlistId !== "") {
      obj.wishlistId = message.wishlistId;
    }
    if (message.courseId !== "") {
      obj.courseId = message.courseId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddToWishlistRequest>, I>>(base?: I): AddToWishlistRequest {
    return AddToWishlistRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddToWishlistRequest>, I>>(object: I): AddToWishlistRequest {
    const message = createBaseAddToWishlistRequest();
    message.userId = object.userId ?? "";
    message.wishlistId = object.wishlistId ?? "";
    message.courseId = object.courseId ?? "";
    return message;
  },
};

function createBaseAddToWishlistResponse(): AddToWishlistResponse {
  return { item: undefined, error: undefined };
}

export const AddToWishlistResponse: MessageFns<AddToWishlistResponse> = {
  encode(message: AddToWishlistResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.item !== undefined) {
      WishlistItemData.encode(message.item, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddToWishlistResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddToWishlistResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.item = WishlistItemData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddToWishlistResponse {
    return {
      item: isSet(object.item) ? WishlistItemData.fromJSON(object.item) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: AddToWishlistResponse): unknown {
    const obj: any = {};
    if (message.item !== undefined) {
      obj.item = WishlistItemData.toJSON(message.item);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddToWishlistResponse>, I>>(base?: I): AddToWishlistResponse {
    return AddToWishlistResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddToWishlistResponse>, I>>(object: I): AddToWishlistResponse {
    const message = createBaseAddToWishlistResponse();
    message.item = (object.item !== undefined && object.item !== null)
      ? WishlistItemData.fromPartial(object.item)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseRemoveFromWishlistRequest(): RemoveFromWishlistRequest {
  return { wishlistId: "", courseId: "" };
}

export const RemoveFromWishlistRequest: MessageFns<RemoveFromWishlistRequest> = {
  encode(message: RemoveFromWishlistRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.wishlistId !== "") {
      writer.uint32(10).string(message.wishlistId);
    }
    if (message.courseId !== "") {
      writer.uint32(18).string(message.courseId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveFromWishlistRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveFromWishlistRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.wishlistId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.courseId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveFromWishlistRequest {
    return {
      wishlistId: isSet(object.wishlistId) ? globalThis.String(object.wishlistId) : "",
      courseId: isSet(object.courseId) ? globalThis.String(object.courseId) : "",
    };
  },

  toJSON(message: RemoveFromWishlistRequest): unknown {
    const obj: any = {};
    if (message.wishlistId !== "") {
      obj.wishlistId = message.wishlistId;
    }
    if (message.courseId !== "") {
      obj.courseId = message.courseId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveFromWishlistRequest>, I>>(base?: I): RemoveFromWishlistRequest {
    return RemoveFromWishlistRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveFromWishlistRequest>, I>>(object: I): RemoveFromWishlistRequest {
    const message = createBaseRemoveFromWishlistRequest();
    message.wishlistId = object.wishlistId ?? "";
    message.courseId = object.courseId ?? "";
    return message;
  },
};

function createBaseRemoveFromWishlistResponse(): RemoveFromWishlistResponse {
  return { success: undefined, error: undefined };
}

export const RemoveFromWishlistResponse: MessageFns<RemoveFromWishlistResponse> = {
  encode(message: RemoveFromWishlistResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== undefined) {
      RemoveSuccess.encode(message.success, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveFromWishlistResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveFromWishlistResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.success = RemoveSuccess.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveFromWishlistResponse {
    return {
      success: isSet(object.success) ? RemoveSuccess.fromJSON(object.success) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: RemoveFromWishlistResponse): unknown {
    const obj: any = {};
    if (message.success !== undefined) {
      obj.success = RemoveSuccess.toJSON(message.success);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveFromWishlistResponse>, I>>(base?: I): RemoveFromWishlistResponse {
    return RemoveFromWishlistResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveFromWishlistResponse>, I>>(object: I): RemoveFromWishlistResponse {
    const message = createBaseRemoveFromWishlistResponse();
    message.success = (object.success !== undefined && object.success !== null)
      ? RemoveSuccess.fromPartial(object.success)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseListWishlistRequest(): ListWishlistRequest {
  return { userId: "", pagination: undefined };
}

export const ListWishlistRequest: MessageFns<ListWishlistRequest> = {
  encode(message: ListWishlistRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.pagination !== undefined) {
      PaginationRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWishlistRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWishlistRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PaginationRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWishlistRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      pagination: isSet(object.pagination) ? PaginationRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: ListWishlistRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PaginationRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListWishlistRequest>, I>>(base?: I): ListWishlistRequest {
    return ListWishlistRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListWishlistRequest>, I>>(object: I): ListWishlistRequest {
    const message = createBaseListWishlistRequest();
    message.userId = object.userId ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PaginationRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseListWishlistResponse(): ListWishlistResponse {
  return { success: undefined, error: undefined };
}

export const ListWishlistResponse: MessageFns<ListWishlistResponse> = {
  encode(message: ListWishlistResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== undefined) {
      WishlistSuccess.encode(message.success, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWishlistResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWishlistResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.success = WishlistSuccess.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWishlistResponse {
    return {
      success: isSet(object.success) ? WishlistSuccess.fromJSON(object.success) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ListWishlistResponse): unknown {
    const obj: any = {};
    if (message.success !== undefined) {
      obj.success = WishlistSuccess.toJSON(message.success);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListWishlistResponse>, I>>(base?: I): ListWishlistResponse {
    return ListWishlistResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListWishlistResponse>, I>>(object: I): ListWishlistResponse {
    const message = createBaseListWishlistResponse();
    message.success = (object.success !== undefined && object.success !== null)
      ? WishlistSuccess.fromPartial(object.success)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseWishlistSuccess(): WishlistSuccess {
  return { wishlist: undefined, pagination: undefined };
}

export const WishlistSuccess: MessageFns<WishlistSuccess> = {
  encode(message: WishlistSuccess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.wishlist !== undefined) {
      WishlistData.encode(message.wishlist, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PaginationResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WishlistSuccess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWishlistSuccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.wishlist = WishlistData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PaginationResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WishlistSuccess {
    return {
      wishlist: isSet(object.wishlist) ? WishlistData.fromJSON(object.wishlist) : undefined,
      pagination: isSet(object.pagination) ? PaginationResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: WishlistSuccess): unknown {
    const obj: any = {};
    if (message.wishlist !== undefined) {
      obj.wishlist = WishlistData.toJSON(message.wishlist);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PaginationResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WishlistSuccess>, I>>(base?: I): WishlistSuccess {
    return WishlistSuccess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WishlistSuccess>, I>>(object: I): WishlistSuccess {
    const message = createBaseWishlistSuccess();
    message.wishlist = (object.wishlist !== undefined && object.wishlist !== null)
      ? WishlistData.fromPartial(object.wishlist)
      : undefined;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PaginationResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseInstructorSuccessResponse(): InstructorSuccessResponse {
  return { user: undefined };
}

export const InstructorSuccessResponse: MessageFns<InstructorSuccessResponse> = {
  encode(message: InstructorSuccessResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      UserData.encode(message.user, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InstructorSuccessResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstructorSuccessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = UserData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InstructorSuccessResponse {
    return { user: isSet(object.user) ? UserData.fromJSON(object.user) : undefined };
  },

  toJSON(message: InstructorSuccessResponse): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = UserData.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InstructorSuccessResponse>, I>>(base?: I): InstructorSuccessResponse {
    return InstructorSuccessResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InstructorSuccessResponse>, I>>(object: I): InstructorSuccessResponse {
    const message = createBaseInstructorSuccessResponse();
    message.user = (object.user !== undefined && object.user !== null) ? UserData.fromPartial(object.user) : undefined;
    return message;
  },
};

function createBaseRegisterInstructorResponse(): RegisterInstructorResponse {
  return { error: undefined, success: undefined };
}

export const RegisterInstructorResponse: MessageFns<RegisterInstructorResponse> = {
  encode(message: RegisterInstructorResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(10).fork()).join();
    }
    if (message.success !== undefined) {
      InstructorSuccessResponse.encode(message.success, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterInstructorResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterInstructorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.success = InstructorSuccessResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterInstructorResponse {
    return {
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
      success: isSet(object.success) ? InstructorSuccessResponse.fromJSON(object.success) : undefined,
    };
  },

  toJSON(message: RegisterInstructorResponse): unknown {
    const obj: any = {};
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    if (message.success !== undefined) {
      obj.success = InstructorSuccessResponse.toJSON(message.success);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RegisterInstructorResponse>, I>>(base?: I): RegisterInstructorResponse {
    return RegisterInstructorResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RegisterInstructorResponse>, I>>(object: I): RegisterInstructorResponse {
    const message = createBaseRegisterInstructorResponse();
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    message.success = (object.success !== undefined && object.success !== null)
      ? InstructorSuccessResponse.fromPartial(object.success)
      : undefined;
    return message;
  },
};

function createBaseRegisterInstructorRequest(): RegisterInstructorRequest {
  return {
    userId: "",
    extraEmail: undefined,
    city: undefined,
    firstName: "",
    lastName: "",
    expertise: undefined,
    phone: undefined,
    linkedin: undefined,
    instagram: undefined,
    facebook: undefined,
    language: undefined,
    website: undefined,
    biography: undefined,
    headline: undefined,
    education: undefined,
    experience: undefined,
    country: undefined,
  };
}

export const RegisterInstructorRequest: MessageFns<RegisterInstructorRequest> = {
  encode(message: RegisterInstructorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.extraEmail !== undefined) {
      writer.uint32(18).string(message.extraEmail);
    }
    if (message.city !== undefined) {
      writer.uint32(26).string(message.city);
    }
    if (message.firstName !== "") {
      writer.uint32(34).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(42).string(message.lastName);
    }
    if (message.expertise !== undefined) {
      writer.uint32(50).string(message.expertise);
    }
    if (message.phone !== undefined) {
      writer.uint32(58).string(message.phone);
    }
    if (message.linkedin !== undefined) {
      writer.uint32(66).string(message.linkedin);
    }
    if (message.instagram !== undefined) {
      writer.uint32(74).string(message.instagram);
    }
    if (message.facebook !== undefined) {
      writer.uint32(82).string(message.facebook);
    }
    if (message.language !== undefined) {
      writer.uint32(90).string(message.language);
    }
    if (message.website !== undefined) {
      writer.uint32(98).string(message.website);
    }
    if (message.biography !== undefined) {
      writer.uint32(106).string(message.biography);
    }
    if (message.headline !== undefined) {
      writer.uint32(114).string(message.headline);
    }
    if (message.education !== undefined) {
      writer.uint32(146).string(message.education);
    }
    if (message.experience !== undefined) {
      writer.uint32(152).int32(message.experience);
    }
    if (message.country !== undefined) {
      writer.uint32(162).string(message.country);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterInstructorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterInstructorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.extraEmail = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.city = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.expertise = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.linkedin = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.instagram = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.facebook = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.language = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.website = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.biography = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.headline = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.education = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.experience = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.country = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterInstructorRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      extraEmail: isSet(object.extraEmail) ? globalThis.String(object.extraEmail) : undefined,
      city: isSet(object.city) ? globalThis.String(object.city) : undefined,
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      expertise: isSet(object.expertise) ? globalThis.String(object.expertise) : undefined,
      phone: isSet(object.phone) ? globalThis.String(object.phone) : undefined,
      linkedin: isSet(object.linkedin) ? globalThis.String(object.linkedin) : undefined,
      instagram: isSet(object.instagram) ? globalThis.String(object.instagram) : undefined,
      facebook: isSet(object.facebook) ? globalThis.String(object.facebook) : undefined,
      language: isSet(object.language) ? globalThis.String(object.language) : undefined,
      website: isSet(object.website) ? globalThis.String(object.website) : undefined,
      biography: isSet(object.biography) ? globalThis.String(object.biography) : undefined,
      headline: isSet(object.headline) ? globalThis.String(object.headline) : undefined,
      education: isSet(object.education) ? globalThis.String(object.education) : undefined,
      experience: isSet(object.experience) ? globalThis.Number(object.experience) : undefined,
      country: isSet(object.country) ? globalThis.String(object.country) : undefined,
    };
  },

  toJSON(message: RegisterInstructorRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.extraEmail !== undefined) {
      obj.extraEmail = message.extraEmail;
    }
    if (message.city !== undefined) {
      obj.city = message.city;
    }
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.expertise !== undefined) {
      obj.expertise = message.expertise;
    }
    if (message.phone !== undefined) {
      obj.phone = message.phone;
    }
    if (message.linkedin !== undefined) {
      obj.linkedin = message.linkedin;
    }
    if (message.instagram !== undefined) {
      obj.instagram = message.instagram;
    }
    if (message.facebook !== undefined) {
      obj.facebook = message.facebook;
    }
    if (message.language !== undefined) {
      obj.language = message.language;
    }
    if (message.website !== undefined) {
      obj.website = message.website;
    }
    if (message.biography !== undefined) {
      obj.biography = message.biography;
    }
    if (message.headline !== undefined) {
      obj.headline = message.headline;
    }
    if (message.education !== undefined) {
      obj.education = message.education;
    }
    if (message.experience !== undefined) {
      obj.experience = Math.round(message.experience);
    }
    if (message.country !== undefined) {
      obj.country = message.country;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RegisterInstructorRequest>, I>>(base?: I): RegisterInstructorRequest {
    return RegisterInstructorRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RegisterInstructorRequest>, I>>(object: I): RegisterInstructorRequest {
    const message = createBaseRegisterInstructorRequest();
    message.userId = object.userId ?? "";
    message.extraEmail = object.extraEmail ?? undefined;
    message.city = object.city ?? undefined;
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.expertise = object.expertise ?? undefined;
    message.phone = object.phone ?? undefined;
    message.linkedin = object.linkedin ?? undefined;
    message.instagram = object.instagram ?? undefined;
    message.facebook = object.facebook ?? undefined;
    message.language = object.language ?? undefined;
    message.website = object.website ?? undefined;
    message.biography = object.biography ?? undefined;
    message.headline = object.headline ?? undefined;
    message.education = object.education ?? undefined;
    message.experience = object.experience ?? undefined;
    message.country = object.country ?? undefined;
    return message;
  },
};

function createBaseDetailedUserInfo(): DetailedUserInfo {
  return {
    userId: "",
    firstName: undefined,
    lastName: undefined,
    phone: undefined,
    headline: undefined,
    biography: undefined,
    avatar: undefined,
    website: undefined,
    language: undefined,
    facebook: undefined,
    instagram: undefined,
    linkedin: undefined,
    status: "",
    role: "",
    email: "",
    updatedAt: "",
    createdAt: "",
  };
}

export const DetailedUserInfo: MessageFns<DetailedUserInfo> = {
  encode(message: DetailedUserInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.firstName !== undefined) {
      writer.uint32(18).string(message.firstName);
    }
    if (message.lastName !== undefined) {
      writer.uint32(26).string(message.lastName);
    }
    if (message.phone !== undefined) {
      writer.uint32(34).string(message.phone);
    }
    if (message.headline !== undefined) {
      writer.uint32(42).string(message.headline);
    }
    if (message.biography !== undefined) {
      writer.uint32(50).string(message.biography);
    }
    if (message.avatar !== undefined) {
      writer.uint32(58).string(message.avatar);
    }
    if (message.website !== undefined) {
      writer.uint32(66).string(message.website);
    }
    if (message.language !== undefined) {
      writer.uint32(74).string(message.language);
    }
    if (message.facebook !== undefined) {
      writer.uint32(82).string(message.facebook);
    }
    if (message.instagram !== undefined) {
      writer.uint32(90).string(message.instagram);
    }
    if (message.linkedin !== undefined) {
      writer.uint32(98).string(message.linkedin);
    }
    if (message.status !== "") {
      writer.uint32(106).string(message.status);
    }
    if (message.role !== "") {
      writer.uint32(114).string(message.role);
    }
    if (message.email !== "") {
      writer.uint32(122).string(message.email);
    }
    if (message.updatedAt !== "") {
      writer.uint32(130).string(message.updatedAt);
    }
    if (message.createdAt !== "") {
      writer.uint32(138).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DetailedUserInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetailedUserInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.headline = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.biography = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.avatar = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.website = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.language = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.facebook = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.instagram = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.linkedin = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DetailedUserInfo {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : undefined,
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : undefined,
      phone: isSet(object.phone) ? globalThis.String(object.phone) : undefined,
      headline: isSet(object.headline) ? globalThis.String(object.headline) : undefined,
      biography: isSet(object.biography) ? globalThis.String(object.biography) : undefined,
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : undefined,
      website: isSet(object.website) ? globalThis.String(object.website) : undefined,
      language: isSet(object.language) ? globalThis.String(object.language) : undefined,
      facebook: isSet(object.facebook) ? globalThis.String(object.facebook) : undefined,
      instagram: isSet(object.instagram) ? globalThis.String(object.instagram) : undefined,
      linkedin: isSet(object.linkedin) ? globalThis.String(object.linkedin) : undefined,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
    };
  },

  toJSON(message: DetailedUserInfo): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.firstName !== undefined) {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== undefined) {
      obj.lastName = message.lastName;
    }
    if (message.phone !== undefined) {
      obj.phone = message.phone;
    }
    if (message.headline !== undefined) {
      obj.headline = message.headline;
    }
    if (message.biography !== undefined) {
      obj.biography = message.biography;
    }
    if (message.avatar !== undefined) {
      obj.avatar = message.avatar;
    }
    if (message.website !== undefined) {
      obj.website = message.website;
    }
    if (message.language !== undefined) {
      obj.language = message.language;
    }
    if (message.facebook !== undefined) {
      obj.facebook = message.facebook;
    }
    if (message.instagram !== undefined) {
      obj.instagram = message.instagram;
    }
    if (message.linkedin !== undefined) {
      obj.linkedin = message.linkedin;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DetailedUserInfo>, I>>(base?: I): DetailedUserInfo {
    return DetailedUserInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DetailedUserInfo>, I>>(object: I): DetailedUserInfo {
    const message = createBaseDetailedUserInfo();
    message.userId = object.userId ?? "";
    message.firstName = object.firstName ?? undefined;
    message.lastName = object.lastName ?? undefined;
    message.phone = object.phone ?? undefined;
    message.headline = object.headline ?? undefined;
    message.biography = object.biography ?? undefined;
    message.avatar = object.avatar ?? undefined;
    message.website = object.website ?? undefined;
    message.language = object.language ?? undefined;
    message.facebook = object.facebook ?? undefined;
    message.instagram = object.instagram ?? undefined;
    message.linkedin = object.linkedin ?? undefined;
    message.status = object.status ?? "";
    message.role = object.role ?? "";
    message.email = object.email ?? "";
    message.updatedAt = object.updatedAt ?? "";
    message.createdAt = object.createdAt ?? "";
    return message;
  },
};

function createBaseUpdateUserDetailsRequest(): UpdateUserDetailsRequest {
  return {
    userId: "",
    firstName: "",
    lastName: undefined,
    phone: undefined,
    socials: [],
    biography: undefined,
    avatar: undefined,
    website: undefined,
    language: undefined,
    city: undefined,
    country: undefined,
    gender: undefined,
  };
}

export const UpdateUserDetailsRequest: MessageFns<UpdateUserDetailsRequest> = {
  encode(message: UpdateUserDetailsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.firstName !== "") {
      writer.uint32(18).string(message.firstName);
    }
    if (message.lastName !== undefined) {
      writer.uint32(26).string(message.lastName);
    }
    if (message.phone !== undefined) {
      writer.uint32(34).string(message.phone);
    }
    for (const v of message.socials) {
      UserSocialsData.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.biography !== undefined) {
      writer.uint32(50).string(message.biography);
    }
    if (message.avatar !== undefined) {
      writer.uint32(58).string(message.avatar);
    }
    if (message.website !== undefined) {
      writer.uint32(66).string(message.website);
    }
    if (message.language !== undefined) {
      writer.uint32(74).string(message.language);
    }
    if (message.city !== undefined) {
      writer.uint32(82).string(message.city);
    }
    if (message.country !== undefined) {
      writer.uint32(90).string(message.country);
    }
    if (message.gender !== undefined) {
      writer.uint32(98).string(message.gender);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserDetailsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserDetailsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.socials.push(UserSocialsData.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.biography = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.avatar = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.website = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.language = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.city = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.country = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.gender = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserDetailsRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : undefined,
      phone: isSet(object.phone) ? globalThis.String(object.phone) : undefined,
      socials: globalThis.Array.isArray(object?.socials)
        ? object.socials.map((e: any) => UserSocialsData.fromJSON(e))
        : [],
      biography: isSet(object.biography) ? globalThis.String(object.biography) : undefined,
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : undefined,
      website: isSet(object.website) ? globalThis.String(object.website) : undefined,
      language: isSet(object.language) ? globalThis.String(object.language) : undefined,
      city: isSet(object.city) ? globalThis.String(object.city) : undefined,
      country: isSet(object.country) ? globalThis.String(object.country) : undefined,
      gender: isSet(object.gender) ? globalThis.String(object.gender) : undefined,
    };
  },

  toJSON(message: UpdateUserDetailsRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== undefined) {
      obj.lastName = message.lastName;
    }
    if (message.phone !== undefined) {
      obj.phone = message.phone;
    }
    if (message.socials?.length) {
      obj.socials = message.socials.map((e) => UserSocialsData.toJSON(e));
    }
    if (message.biography !== undefined) {
      obj.biography = message.biography;
    }
    if (message.avatar !== undefined) {
      obj.avatar = message.avatar;
    }
    if (message.website !== undefined) {
      obj.website = message.website;
    }
    if (message.language !== undefined) {
      obj.language = message.language;
    }
    if (message.city !== undefined) {
      obj.city = message.city;
    }
    if (message.country !== undefined) {
      obj.country = message.country;
    }
    if (message.gender !== undefined) {
      obj.gender = message.gender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserDetailsRequest>, I>>(base?: I): UpdateUserDetailsRequest {
    return UpdateUserDetailsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserDetailsRequest>, I>>(object: I): UpdateUserDetailsRequest {
    const message = createBaseUpdateUserDetailsRequest();
    message.userId = object.userId ?? "";
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? undefined;
    message.phone = object.phone ?? undefined;
    message.socials = object.socials?.map((e) => UserSocialsData.fromPartial(e)) || [];
    message.biography = object.biography ?? undefined;
    message.avatar = object.avatar ?? undefined;
    message.website = object.website ?? undefined;
    message.language = object.language ?? undefined;
    message.city = object.city ?? undefined;
    message.country = object.country ?? undefined;
    message.gender = object.gender ?? undefined;
    return message;
  },
};

function createBaseUpdateUserDetailsResponse(): UpdateUserDetailsResponse {
  return { user: undefined, error: undefined };
}

export const UpdateUserDetailsResponse: MessageFns<UpdateUserDetailsResponse> = {
  encode(message: UpdateUserDetailsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      UserData.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserDetailsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserDetailsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = UserData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserDetailsResponse {
    return {
      user: isSet(object.user) ? UserData.fromJSON(object.user) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: UpdateUserDetailsResponse): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = UserData.toJSON(message.user);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserDetailsResponse>, I>>(base?: I): UpdateUserDetailsResponse {
    return UpdateUserDetailsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserDetailsResponse>, I>>(object: I): UpdateUserDetailsResponse {
    const message = createBaseUpdateUserDetailsResponse();
    message.user = (object.user !== undefined && object.user !== null) ? UserData.fromPartial(object.user) : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseChangePasswordRequest(): ChangePasswordRequest {
  return { userId: "", oldPassword: "", newPassword: "" };
}

export const ChangePasswordRequest: MessageFns<ChangePasswordRequest> = {
  encode(message: ChangePasswordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.oldPassword !== "") {
      writer.uint32(18).string(message.oldPassword);
    }
    if (message.newPassword !== "") {
      writer.uint32(26).string(message.newPassword);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangePasswordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangePasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.oldPassword = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.newPassword = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangePasswordRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      oldPassword: isSet(object.oldPassword) ? globalThis.String(object.oldPassword) : "",
      newPassword: isSet(object.newPassword) ? globalThis.String(object.newPassword) : "",
    };
  },

  toJSON(message: ChangePasswordRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.oldPassword !== "") {
      obj.oldPassword = message.oldPassword;
    }
    if (message.newPassword !== "") {
      obj.newPassword = message.newPassword;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChangePasswordRequest>, I>>(base?: I): ChangePasswordRequest {
    return ChangePasswordRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChangePasswordRequest>, I>>(object: I): ChangePasswordRequest {
    const message = createBaseChangePasswordRequest();
    message.userId = object.userId ?? "";
    message.oldPassword = object.oldPassword ?? "";
    message.newPassword = object.newPassword ?? "";
    return message;
  },
};

function createBaseChangePasswordResponse(): ChangePasswordResponse {
  return { success: undefined, error: undefined };
}

export const ChangePasswordResponse: MessageFns<ChangePasswordResponse> = {
  encode(message: ChangePasswordResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== undefined) {
      ChangePasswordSuccess.encode(message.success, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangePasswordResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangePasswordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.success = ChangePasswordSuccess.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangePasswordResponse {
    return {
      success: isSet(object.success) ? ChangePasswordSuccess.fromJSON(object.success) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ChangePasswordResponse): unknown {
    const obj: any = {};
    if (message.success !== undefined) {
      obj.success = ChangePasswordSuccess.toJSON(message.success);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChangePasswordResponse>, I>>(base?: I): ChangePasswordResponse {
    return ChangePasswordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChangePasswordResponse>, I>>(object: I): ChangePasswordResponse {
    const message = createBaseChangePasswordResponse();
    message.success = (object.success !== undefined && object.success !== null)
      ? ChangePasswordSuccess.fromPartial(object.success)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseChangePasswordSuccess(): ChangePasswordSuccess {
  return { updated: false };
}

export const ChangePasswordSuccess: MessageFns<ChangePasswordSuccess> = {
  encode(message: ChangePasswordSuccess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updated !== false) {
      writer.uint32(8).bool(message.updated);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangePasswordSuccess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangePasswordSuccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.updated = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangePasswordSuccess {
    return { updated: isSet(object.updated) ? globalThis.Boolean(object.updated) : false };
  },

  toJSON(message: ChangePasswordSuccess): unknown {
    const obj: any = {};
    if (message.updated !== false) {
      obj.updated = message.updated;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChangePasswordSuccess>, I>>(base?: I): ChangePasswordSuccess {
    return ChangePasswordSuccess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChangePasswordSuccess>, I>>(object: I): ChangePasswordSuccess {
    const message = createBaseChangePasswordSuccess();
    message.updated = object.updated ?? false;
    return message;
  },
};

function createBaseGetWalletTransactionsRequest(): GetWalletTransactionsRequest {
  return { userId: "", pagination: undefined };
}

export const GetWalletTransactionsRequest: MessageFns<GetWalletTransactionsRequest> = {
  encode(message: GetWalletTransactionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.pagination !== undefined) {
      PaginationRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWalletTransactionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWalletTransactionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PaginationRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWalletTransactionsRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      pagination: isSet(object.pagination) ? PaginationRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: GetWalletTransactionsRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PaginationRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWalletTransactionsRequest>, I>>(base?: I): GetWalletTransactionsRequest {
    return GetWalletTransactionsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWalletTransactionsRequest>, I>>(object: I): GetWalletTransactionsRequest {
    const message = createBaseGetWalletTransactionsRequest();
    message.userId = object.userId ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PaginationRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseGetWalletTransactionsResponse(): GetWalletTransactionsResponse {
  return { success: undefined, error: undefined };
}

export const GetWalletTransactionsResponse: MessageFns<GetWalletTransactionsResponse> = {
  encode(message: GetWalletTransactionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== undefined) {
      WalletTransactionsSuccess.encode(message.success, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWalletTransactionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWalletTransactionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.success = WalletTransactionsSuccess.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWalletTransactionsResponse {
    return {
      success: isSet(object.success) ? WalletTransactionsSuccess.fromJSON(object.success) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: GetWalletTransactionsResponse): unknown {
    const obj: any = {};
    if (message.success !== undefined) {
      obj.success = WalletTransactionsSuccess.toJSON(message.success);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWalletTransactionsResponse>, I>>(base?: I): GetWalletTransactionsResponse {
    return GetWalletTransactionsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWalletTransactionsResponse>, I>>(
    object: I,
  ): GetWalletTransactionsResponse {
    const message = createBaseGetWalletTransactionsResponse();
    message.success = (object.success !== undefined && object.success !== null)
      ? WalletTransactionsSuccess.fromPartial(object.success)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseWalletTransactionsSuccess(): WalletTransactionsSuccess {
  return { transactions: [], pagination: undefined };
}

export const WalletTransactionsSuccess: MessageFns<WalletTransactionsSuccess> = {
  encode(message: WalletTransactionsSuccess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.transactions) {
      WalletTransaction.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PaginationResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WalletTransactionsSuccess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWalletTransactionsSuccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transactions.push(WalletTransaction.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PaginationResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WalletTransactionsSuccess {
    return {
      transactions: globalThis.Array.isArray(object?.transactions)
        ? object.transactions.map((e: any) => WalletTransaction.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PaginationResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: WalletTransactionsSuccess): unknown {
    const obj: any = {};
    if (message.transactions?.length) {
      obj.transactions = message.transactions.map((e) => WalletTransaction.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PaginationResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WalletTransactionsSuccess>, I>>(base?: I): WalletTransactionsSuccess {
    return WalletTransactionsSuccess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WalletTransactionsSuccess>, I>>(object: I): WalletTransactionsSuccess {
    const message = createBaseWalletTransactionsSuccess();
    message.transactions = object.transactions?.map((e) => WalletTransaction.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PaginationResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseGetAllUsersRequest(): GetAllUsersRequest {
  return { pagination: undefined };
}

export const GetAllUsersRequest: MessageFns<GetAllUsersRequest> = {
  encode(message: GetAllUsersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PaginationRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllUsersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllUsersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PaginationRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllUsersRequest {
    return { pagination: isSet(object.pagination) ? PaginationRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: GetAllUsersRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PaginationRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllUsersRequest>, I>>(base?: I): GetAllUsersRequest {
    return GetAllUsersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllUsersRequest>, I>>(object: I): GetAllUsersRequest {
    const message = createBaseGetAllUsersRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PaginationRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseGetAllUserEmailsRequest(): GetAllUserEmailsRequest {
  return {};
}

export const GetAllUserEmailsRequest: MessageFns<GetAllUserEmailsRequest> = {
  encode(_: GetAllUserEmailsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllUserEmailsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllUserEmailsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetAllUserEmailsRequest {
    return {};
  },

  toJSON(_: GetAllUserEmailsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllUserEmailsRequest>, I>>(base?: I): GetAllUserEmailsRequest {
    return GetAllUserEmailsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllUserEmailsRequest>, I>>(_: I): GetAllUserEmailsRequest {
    const message = createBaseGetAllUserEmailsRequest();
    return message;
  },
};

function createBaseGetAllUsersResponse(): GetAllUsersResponse {
  return { success: undefined, error: undefined };
}

export const GetAllUsersResponse: MessageFns<GetAllUsersResponse> = {
  encode(message: GetAllUsersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== undefined) {
      AllUsersSuccess.encode(message.success, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllUsersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.success = AllUsersSuccess.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllUsersResponse {
    return {
      success: isSet(object.success) ? AllUsersSuccess.fromJSON(object.success) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: GetAllUsersResponse): unknown {
    const obj: any = {};
    if (message.success !== undefined) {
      obj.success = AllUsersSuccess.toJSON(message.success);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllUsersResponse>, I>>(base?: I): GetAllUsersResponse {
    return GetAllUsersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllUsersResponse>, I>>(object: I): GetAllUsersResponse {
    const message = createBaseGetAllUsersResponse();
    message.success = (object.success !== undefined && object.success !== null)
      ? AllUsersSuccess.fromPartial(object.success)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseGetAllUserEmailsResponse(): GetAllUserEmailsResponse {
  return { success: undefined, error: undefined };
}

export const GetAllUserEmailsResponse: MessageFns<GetAllUserEmailsResponse> = {
  encode(message: GetAllUserEmailsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== undefined) {
      AllUserEmailsSuccess.encode(message.success, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllUserEmailsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllUserEmailsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.success = AllUserEmailsSuccess.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllUserEmailsResponse {
    return {
      success: isSet(object.success) ? AllUserEmailsSuccess.fromJSON(object.success) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: GetAllUserEmailsResponse): unknown {
    const obj: any = {};
    if (message.success !== undefined) {
      obj.success = AllUserEmailsSuccess.toJSON(message.success);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllUserEmailsResponse>, I>>(base?: I): GetAllUserEmailsResponse {
    return GetAllUserEmailsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllUserEmailsResponse>, I>>(object: I): GetAllUserEmailsResponse {
    const message = createBaseGetAllUserEmailsResponse();
    message.success = (object.success !== undefined && object.success !== null)
      ? AllUserEmailsSuccess.fromPartial(object.success)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseAllUserEmailsSuccess(): AllUserEmailsSuccess {
  return { email: [] };
}

export const AllUserEmailsSuccess: MessageFns<AllUserEmailsSuccess> = {
  encode(message: AllUserEmailsSuccess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.email) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AllUserEmailsSuccess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAllUserEmailsSuccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AllUserEmailsSuccess {
    return { email: globalThis.Array.isArray(object?.email) ? object.email.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: AllUserEmailsSuccess): unknown {
    const obj: any = {};
    if (message.email?.length) {
      obj.email = message.email;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AllUserEmailsSuccess>, I>>(base?: I): AllUserEmailsSuccess {
    return AllUserEmailsSuccess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AllUserEmailsSuccess>, I>>(object: I): AllUserEmailsSuccess {
    const message = createBaseAllUserEmailsSuccess();
    message.email = object.email?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetUsersByIdsResponse(): GetUsersByIdsResponse {
  return { success: undefined, error: undefined };
}

export const GetUsersByIdsResponse: MessageFns<GetUsersByIdsResponse> = {
  encode(message: GetUsersByIdsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== undefined) {
      UsersResponse.encode(message.success, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUsersByIdsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUsersByIdsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.success = UsersResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUsersByIdsResponse {
    return {
      success: isSet(object.success) ? UsersResponse.fromJSON(object.success) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: GetUsersByIdsResponse): unknown {
    const obj: any = {};
    if (message.success !== undefined) {
      obj.success = UsersResponse.toJSON(message.success);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUsersByIdsResponse>, I>>(base?: I): GetUsersByIdsResponse {
    return GetUsersByIdsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUsersByIdsResponse>, I>>(object: I): GetUsersByIdsResponse {
    const message = createBaseGetUsersByIdsResponse();
    message.success = (object.success !== undefined && object.success !== null)
      ? UsersResponse.fromPartial(object.success)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseUsersResponse(): UsersResponse {
  return { users: [] };
}

export const UsersResponse: MessageFns<UsersResponse> = {
  encode(message: UsersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.users) {
      UserData.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UsersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.users.push(UserData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UsersResponse {
    return { users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => UserData.fromJSON(e)) : [] };
  },

  toJSON(message: UsersResponse): unknown {
    const obj: any = {};
    if (message.users?.length) {
      obj.users = message.users.map((e) => UserData.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UsersResponse>, I>>(base?: I): UsersResponse {
    return UsersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UsersResponse>, I>>(object: I): UsersResponse {
    const message = createBaseUsersResponse();
    message.users = object.users?.map((e) => UserData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAllUsersSuccess(): AllUsersSuccess {
  return { users: [], pagination: undefined };
}

export const AllUsersSuccess: MessageFns<AllUsersSuccess> = {
  encode(message: AllUsersSuccess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.users) {
      UserData.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PaginationResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AllUsersSuccess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAllUsersSuccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.users.push(UserData.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PaginationResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AllUsersSuccess {
    return {
      users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => UserData.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PaginationResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: AllUsersSuccess): unknown {
    const obj: any = {};
    if (message.users?.length) {
      obj.users = message.users.map((e) => UserData.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PaginationResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AllUsersSuccess>, I>>(base?: I): AllUsersSuccess {
    return AllUsersSuccess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AllUsersSuccess>, I>>(object: I): AllUsersSuccess {
    const message = createBaseAllUsersSuccess();
    message.users = object.users?.map((e) => UserData.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PaginationResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseGetUserRequest(): GetUserRequest {
  return { userId: "" };
}

export const GetUserRequest: MessageFns<GetUserRequest> = {
  encode(message: GetUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: GetUserRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserRequest>, I>>(base?: I): GetUserRequest {
    return GetUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserRequest>, I>>(object: I): GetUserRequest {
    const message = createBaseGetUserRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseGetUsersByIdsRequest(): GetUsersByIdsRequest {
  return { userIds: [] };
}

export const GetUsersByIdsRequest: MessageFns<GetUsersByIdsRequest> = {
  encode(message: GetUsersByIdsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.userIds) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUsersByIdsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUsersByIdsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUsersByIdsRequest {
    return {
      userIds: globalThis.Array.isArray(object?.userIds) ? object.userIds.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: GetUsersByIdsRequest): unknown {
    const obj: any = {};
    if (message.userIds?.length) {
      obj.userIds = message.userIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUsersByIdsRequest>, I>>(base?: I): GetUsersByIdsRequest {
    return GetUsersByIdsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUsersByIdsRequest>, I>>(object: I): GetUsersByIdsRequest {
    const message = createBaseGetUsersByIdsRequest();
    message.userIds = object.userIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetCurrentUserRequest(): GetCurrentUserRequest {
  return { userId: "" };
}

export const GetCurrentUserRequest: MessageFns<GetCurrentUserRequest> = {
  encode(message: GetCurrentUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCurrentUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCurrentUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCurrentUserRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: GetCurrentUserRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCurrentUserRequest>, I>>(base?: I): GetCurrentUserRequest {
    return GetCurrentUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCurrentUserRequest>, I>>(object: I): GetCurrentUserRequest {
    const message = createBaseGetCurrentUserRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseCheckUserByEmailRequest(): CheckUserByEmailRequest {
  return { email: "" };
}

export const CheckUserByEmailRequest: MessageFns<CheckUserByEmailRequest> = {
  encode(message: CheckUserByEmailRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckUserByEmailRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckUserByEmailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckUserByEmailRequest {
    return { email: isSet(object.email) ? globalThis.String(object.email) : "" };
  },

  toJSON(message: CheckUserByEmailRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckUserByEmailRequest>, I>>(base?: I): CheckUserByEmailRequest {
    return CheckUserByEmailRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckUserByEmailRequest>, I>>(object: I): CheckUserByEmailRequest {
    const message = createBaseCheckUserByEmailRequest();
    message.email = object.email ?? "";
    return message;
  },
};

function createBaseEmailExist(): EmailExist {
  return { success: "", error: "" };
}

export const EmailExist: MessageFns<EmailExist> = {
  encode(message: EmailExist, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== "") {
      writer.uint32(10).string(message.success);
    }
    if (message.error !== "") {
      writer.uint32(18).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmailExist {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmailExist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.success = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EmailExist {
    return {
      success: isSet(object.success) ? globalThis.String(object.success) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: EmailExist): unknown {
    const obj: any = {};
    if (message.success !== "") {
      obj.success = message.success;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EmailExist>, I>>(base?: I): EmailExist {
    return EmailExist.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EmailExist>, I>>(object: I): EmailExist {
    const message = createBaseEmailExist();
    message.success = object.success ?? "";
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseCheckUserByEmailResponse(): CheckUserByEmailResponse {
  return { response: undefined, error: undefined };
}

export const CheckUserByEmailResponse: MessageFns<CheckUserByEmailResponse> = {
  encode(message: CheckUserByEmailResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.response !== undefined) {
      EmailExist.encode(message.response, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckUserByEmailResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckUserByEmailResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.response = EmailExist.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckUserByEmailResponse {
    return {
      response: isSet(object.response) ? EmailExist.fromJSON(object.response) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: CheckUserByEmailResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined) {
      obj.response = EmailExist.toJSON(message.response);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckUserByEmailResponse>, I>>(base?: I): CheckUserByEmailResponse {
    return CheckUserByEmailResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckUserByEmailResponse>, I>>(object: I): CheckUserByEmailResponse {
    const message = createBaseCheckUserByEmailResponse();
    message.response = (object.response !== undefined && object.response !== null)
      ? EmailExist.fromPartial(object.response)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseGetCurrentUserResponse(): GetCurrentUserResponse {
  return { user: undefined, error: undefined };
}

export const GetCurrentUserResponse: MessageFns<GetCurrentUserResponse> = {
  encode(message: GetCurrentUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      UserData.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCurrentUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCurrentUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = UserData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCurrentUserResponse {
    return {
      user: isSet(object.user) ? UserData.fromJSON(object.user) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: GetCurrentUserResponse): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = UserData.toJSON(message.user);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCurrentUserResponse>, I>>(base?: I): GetCurrentUserResponse {
    return GetCurrentUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCurrentUserResponse>, I>>(object: I): GetCurrentUserResponse {
    const message = createBaseGetCurrentUserResponse();
    message.user = (object.user !== undefined && object.user !== null) ? UserData.fromPartial(object.user) : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseGetUserResponse(): GetUserResponse {
  return { user: undefined, error: undefined };
}

export const GetUserResponse: MessageFns<GetUserResponse> = {
  encode(message: GetUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      UserData.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = UserData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserResponse {
    return {
      user: isSet(object.user) ? UserData.fromJSON(object.user) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: GetUserResponse): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = UserData.toJSON(message.user);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserResponse>, I>>(base?: I): GetUserResponse {
    return GetUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserResponse>, I>>(object: I): GetUserResponse {
    const message = createBaseGetUserResponse();
    message.user = (object.user !== undefined && object.user !== null) ? UserData.fromPartial(object.user) : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseBlockUserRequest(): BlockUserRequest {
  return { userId: "" };
}

export const BlockUserRequest: MessageFns<BlockUserRequest> = {
  encode(message: BlockUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockUserRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: BlockUserRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockUserRequest>, I>>(base?: I): BlockUserRequest {
    return BlockUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockUserRequest>, I>>(object: I): BlockUserRequest {
    const message = createBaseBlockUserRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseUnBlockUserRequest(): UnBlockUserRequest {
  return { userId: "" };
}

export const UnBlockUserRequest: MessageFns<UnBlockUserRequest> = {
  encode(message: UnBlockUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnBlockUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnBlockUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnBlockUserRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: UnBlockUserRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnBlockUserRequest>, I>>(base?: I): UnBlockUserRequest {
    return UnBlockUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnBlockUserRequest>, I>>(object: I): UnBlockUserRequest {
    const message = createBaseUnBlockUserRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseBlockUserResponse(): BlockUserResponse {
  return { success: undefined, error: undefined };
}

export const BlockUserResponse: MessageFns<BlockUserResponse> = {
  encode(message: BlockUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== undefined) {
      BlockUserSuccess.encode(message.success, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.success = BlockUserSuccess.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockUserResponse {
    return {
      success: isSet(object.success) ? BlockUserSuccess.fromJSON(object.success) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: BlockUserResponse): unknown {
    const obj: any = {};
    if (message.success !== undefined) {
      obj.success = BlockUserSuccess.toJSON(message.success);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockUserResponse>, I>>(base?: I): BlockUserResponse {
    return BlockUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockUserResponse>, I>>(object: I): BlockUserResponse {
    const message = createBaseBlockUserResponse();
    message.success = (object.success !== undefined && object.success !== null)
      ? BlockUserSuccess.fromPartial(object.success)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseUnBlockUserResponse(): UnBlockUserResponse {
  return { success: undefined, error: undefined };
}

export const UnBlockUserResponse: MessageFns<UnBlockUserResponse> = {
  encode(message: UnBlockUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== undefined) {
      UnBlockUserSuccess.encode(message.success, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnBlockUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnBlockUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.success = UnBlockUserSuccess.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnBlockUserResponse {
    return {
      success: isSet(object.success) ? UnBlockUserSuccess.fromJSON(object.success) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: UnBlockUserResponse): unknown {
    const obj: any = {};
    if (message.success !== undefined) {
      obj.success = UnBlockUserSuccess.toJSON(message.success);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnBlockUserResponse>, I>>(base?: I): UnBlockUserResponse {
    return UnBlockUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnBlockUserResponse>, I>>(object: I): UnBlockUserResponse {
    const message = createBaseUnBlockUserResponse();
    message.success = (object.success !== undefined && object.success !== null)
      ? UnBlockUserSuccess.fromPartial(object.success)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseBlockUserSuccess(): BlockUserSuccess {
  return { updated: false };
}

export const BlockUserSuccess: MessageFns<BlockUserSuccess> = {
  encode(message: BlockUserSuccess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updated !== false) {
      writer.uint32(8).bool(message.updated);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockUserSuccess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockUserSuccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.updated = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockUserSuccess {
    return { updated: isSet(object.updated) ? globalThis.Boolean(object.updated) : false };
  },

  toJSON(message: BlockUserSuccess): unknown {
    const obj: any = {};
    if (message.updated !== false) {
      obj.updated = message.updated;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockUserSuccess>, I>>(base?: I): BlockUserSuccess {
    return BlockUserSuccess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockUserSuccess>, I>>(object: I): BlockUserSuccess {
    const message = createBaseBlockUserSuccess();
    message.updated = object.updated ?? false;
    return message;
  },
};

function createBaseUnBlockUserSuccess(): UnBlockUserSuccess {
  return { updated: false };
}

export const UnBlockUserSuccess: MessageFns<UnBlockUserSuccess> = {
  encode(message: UnBlockUserSuccess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updated !== false) {
      writer.uint32(8).bool(message.updated);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnBlockUserSuccess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnBlockUserSuccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.updated = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnBlockUserSuccess {
    return { updated: isSet(object.updated) ? globalThis.Boolean(object.updated) : false };
  },

  toJSON(message: UnBlockUserSuccess): unknown {
    const obj: any = {};
    if (message.updated !== false) {
      obj.updated = message.updated;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnBlockUserSuccess>, I>>(base?: I): UnBlockUserSuccess {
    return UnBlockUserSuccess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnBlockUserSuccess>, I>>(object: I): UnBlockUserSuccess {
    const message = createBaseUnBlockUserSuccess();
    message.updated = object.updated ?? false;
    return message;
  },
};

function createBaseGetAllInstructorsRequest(): GetAllInstructorsRequest {
  return { pagination: undefined };
}

export const GetAllInstructorsRequest: MessageFns<GetAllInstructorsRequest> = {
  encode(message: GetAllInstructorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PaginationRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllInstructorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllInstructorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PaginationRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllInstructorsRequest {
    return { pagination: isSet(object.pagination) ? PaginationRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: GetAllInstructorsRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PaginationRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllInstructorsRequest>, I>>(base?: I): GetAllInstructorsRequest {
    return GetAllInstructorsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllInstructorsRequest>, I>>(object: I): GetAllInstructorsRequest {
    const message = createBaseGetAllInstructorsRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PaginationRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseGetAllInstructorsResponse(): GetAllInstructorsResponse {
  return { success: undefined, error: undefined };
}

export const GetAllInstructorsResponse: MessageFns<GetAllInstructorsResponse> = {
  encode(message: GetAllInstructorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== undefined) {
      AllInstructorsSuccess.encode(message.success, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllInstructorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllInstructorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.success = AllInstructorsSuccess.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllInstructorsResponse {
    return {
      success: isSet(object.success) ? AllInstructorsSuccess.fromJSON(object.success) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: GetAllInstructorsResponse): unknown {
    const obj: any = {};
    if (message.success !== undefined) {
      obj.success = AllInstructorsSuccess.toJSON(message.success);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllInstructorsResponse>, I>>(base?: I): GetAllInstructorsResponse {
    return GetAllInstructorsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllInstructorsResponse>, I>>(object: I): GetAllInstructorsResponse {
    const message = createBaseGetAllInstructorsResponse();
    message.success = (object.success !== undefined && object.success !== null)
      ? AllInstructorsSuccess.fromPartial(object.success)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseAllInstructorsSuccess(): AllInstructorsSuccess {
  return { instructors: [], pagination: undefined };
}

export const AllInstructorsSuccess: MessageFns<AllInstructorsSuccess> = {
  encode(message: AllInstructorsSuccess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.instructors) {
      UserData.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PaginationResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AllInstructorsSuccess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAllInstructorsSuccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.instructors.push(UserData.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PaginationResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AllInstructorsSuccess {
    return {
      instructors: globalThis.Array.isArray(object?.instructors)
        ? object.instructors.map((e: any) => UserData.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PaginationResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: AllInstructorsSuccess): unknown {
    const obj: any = {};
    if (message.instructors?.length) {
      obj.instructors = message.instructors.map((e) => UserData.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PaginationResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AllInstructorsSuccess>, I>>(base?: I): AllInstructorsSuccess {
    return AllInstructorsSuccess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AllInstructorsSuccess>, I>>(object: I): AllInstructorsSuccess {
    const message = createBaseAllInstructorsSuccess();
    message.instructors = object.instructors?.map((e) => UserData.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PaginationResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

export type UserServiceService = typeof UserServiceService;
export const UserServiceService = {
  /** Get New Refresh Token */
  registerInstructor: {
    path: "/user_service.UserService/RegisterInstructor",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RegisterInstructorRequest) =>
      Buffer.from(RegisterInstructorRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RegisterInstructorRequest.decode(value),
    responseSerialize: (value: RegisterInstructorResponse) =>
      Buffer.from(RegisterInstructorResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RegisterInstructorResponse.decode(value),
  },
  /** Update User Details */
  updateUserDetails: {
    path: "/user_service.UserService/UpdateUserDetails",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateUserDetailsRequest) => Buffer.from(UpdateUserDetailsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateUserDetailsRequest.decode(value),
    responseSerialize: (value: UpdateUserDetailsResponse) =>
      Buffer.from(UpdateUserDetailsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateUserDetailsResponse.decode(value),
  },
  /** Get Wallet Transactions for a User (with pagination) */
  getWalletTransactions: {
    path: "/user_service.UserService/GetWalletTransactions",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetWalletTransactionsRequest) =>
      Buffer.from(GetWalletTransactionsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetWalletTransactionsRequest.decode(value),
    responseSerialize: (value: GetWalletTransactionsResponse) =>
      Buffer.from(GetWalletTransactionsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetWalletTransactionsResponse.decode(value),
  },
  /** Get All Users (with pagination) */
  getAllUsers: {
    path: "/user_service.UserService/GetAllUsers",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllUsersRequest) => Buffer.from(GetAllUsersRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetAllUsersRequest.decode(value),
    responseSerialize: (value: GetAllUsersResponse) => Buffer.from(GetAllUsersResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetAllUsersResponse.decode(value),
  },
  /** Get All Users emails */
  getAllUserEmails: {
    path: "/user_service.UserService/GetAllUserEmails",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllUserEmailsRequest) => Buffer.from(GetAllUserEmailsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetAllUserEmailsRequest.decode(value),
    responseSerialize: (value: GetAllUserEmailsResponse) =>
      Buffer.from(GetAllUserEmailsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetAllUserEmailsResponse.decode(value),
  },
  /** Get All Users emails */
  checkUserEmailExist: {
    path: "/user_service.UserService/CheckUserEmailExist",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CheckUserByEmailRequest) => Buffer.from(CheckUserByEmailRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CheckUserByEmailRequest.decode(value),
    responseSerialize: (value: CheckUserByEmailResponse) =>
      Buffer.from(CheckUserByEmailResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CheckUserByEmailResponse.decode(value),
  },
  /** Get Details About a Particular User by ID */
  getUser: {
    path: "/user_service.UserService/GetUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserRequest) => Buffer.from(GetUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetUserRequest.decode(value),
    responseSerialize: (value: GetUserResponse) => Buffer.from(GetUserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetUserResponse.decode(value),
  },
  /** Get Details About a Particular User by ID */
  getUsersByIds: {
    path: "/user_service.UserService/GetUsersByIds",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUsersByIdsRequest) => Buffer.from(GetUsersByIdsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetUsersByIdsRequest.decode(value),
    responseSerialize: (value: GetUsersByIdsResponse) => Buffer.from(GetUsersByIdsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetUsersByIdsResponse.decode(value),
  },
  /** // Get Details About the currently logged in User */
  getCurrentUser: {
    path: "/user_service.UserService/GetCurrentUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetCurrentUserRequest) => Buffer.from(GetCurrentUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetCurrentUserRequest.decode(value),
    responseSerialize: (value: GetCurrentUserResponse) => Buffer.from(GetCurrentUserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetCurrentUserResponse.decode(value),
  },
  /** Block/Unblock a User */
  blockUser: {
    path: "/user_service.UserService/BlockUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: BlockUserRequest) => Buffer.from(BlockUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => BlockUserRequest.decode(value),
    responseSerialize: (value: BlockUserResponse) => Buffer.from(BlockUserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => BlockUserResponse.decode(value),
  },
  /** Block/Unblock a User */
  unBlockUser: {
    path: "/user_service.UserService/UnBlockUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UnBlockUserRequest) => Buffer.from(UnBlockUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UnBlockUserRequest.decode(value),
    responseSerialize: (value: UnBlockUserResponse) => Buffer.from(UnBlockUserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UnBlockUserResponse.decode(value),
  },
  /** Get All Instructors (with pagination) */
  getAllInstructors: {
    path: "/user_service.UserService/GetAllInstructors",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllInstructorsRequest) => Buffer.from(GetAllInstructorsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetAllInstructorsRequest.decode(value),
    responseSerialize: (value: GetAllInstructorsResponse) =>
      Buffer.from(GetAllInstructorsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetAllInstructorsResponse.decode(value),
  },
  /** Cart */
  addToCart: {
    path: "/user_service.UserService/AddToCart",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddToCartRequest) => Buffer.from(AddToCartRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AddToCartRequest.decode(value),
    responseSerialize: (value: AddToCartResponse) => Buffer.from(AddToCartResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AddToCartResponse.decode(value),
  },
  toggleCartItem: {
    path: "/user_service.UserService/ToggleCartItem",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ToggleCartItemRequest) => Buffer.from(ToggleCartItemRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ToggleCartItemRequest.decode(value),
    responseSerialize: (value: ToggleCartItemResponse) => Buffer.from(ToggleCartItemResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ToggleCartItemResponse.decode(value),
  },
  removeFromCart: {
    path: "/user_service.UserService/RemoveFromCart",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RemoveFromCartRequest) => Buffer.from(RemoveFromCartRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RemoveFromCartRequest.decode(value),
    responseSerialize: (value: RemoveFromCartResponse) => Buffer.from(RemoveFromCartResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RemoveFromCartResponse.decode(value),
  },
  listUserCart: {
    path: "/user_service.UserService/ListUserCart",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListCartRequest) => Buffer.from(ListCartRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListCartRequest.decode(value),
    responseSerialize: (value: ListCartResponse) => Buffer.from(ListCartResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListCartResponse.decode(value),
  },
  /** Wishlist */
  addToWishlist: {
    path: "/user_service.UserService/AddToWishlist",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddToWishlistRequest) => Buffer.from(AddToWishlistRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AddToWishlistRequest.decode(value),
    responseSerialize: (value: AddToWishlistResponse) => Buffer.from(AddToWishlistResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AddToWishlistResponse.decode(value),
  },
  toggleWishlistItem: {
    path: "/user_service.UserService/ToggleWishlistItem",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ToggleWishlistItemRequest) =>
      Buffer.from(ToggleWishlistItemRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ToggleWishlistItemRequest.decode(value),
    responseSerialize: (value: ToggleWishlistItemResponse) =>
      Buffer.from(ToggleWishlistItemResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ToggleWishlistItemResponse.decode(value),
  },
  removeFromWishlist: {
    path: "/user_service.UserService/RemoveFromWishlist",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RemoveFromWishlistRequest) =>
      Buffer.from(RemoveFromWishlistRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RemoveFromWishlistRequest.decode(value),
    responseSerialize: (value: RemoveFromWishlistResponse) =>
      Buffer.from(RemoveFromWishlistResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RemoveFromWishlistResponse.decode(value),
  },
  listUserWishlist: {
    path: "/user_service.UserService/ListUserWishlist",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListWishlistRequest) => Buffer.from(ListWishlistRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListWishlistRequest.decode(value),
    responseSerialize: (value: ListWishlistResponse) => Buffer.from(ListWishlistResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListWishlistResponse.decode(value),
  },
} as const;

export interface UserServiceServer extends UntypedServiceImplementation {
  /** Get New Refresh Token */
  registerInstructor: handleUnaryCall<RegisterInstructorRequest, RegisterInstructorResponse>;
  /** Update User Details */
  updateUserDetails: handleUnaryCall<UpdateUserDetailsRequest, UpdateUserDetailsResponse>;
  /** Get Wallet Transactions for a User (with pagination) */
  getWalletTransactions: handleUnaryCall<GetWalletTransactionsRequest, GetWalletTransactionsResponse>;
  /** Get All Users (with pagination) */
  getAllUsers: handleUnaryCall<GetAllUsersRequest, GetAllUsersResponse>;
  /** Get All Users emails */
  getAllUserEmails: handleUnaryCall<GetAllUserEmailsRequest, GetAllUserEmailsResponse>;
  /** Get All Users emails */
  checkUserEmailExist: handleUnaryCall<CheckUserByEmailRequest, CheckUserByEmailResponse>;
  /** Get Details About a Particular User by ID */
  getUser: handleUnaryCall<GetUserRequest, GetUserResponse>;
  /** Get Details About a Particular User by ID */
  getUsersByIds: handleUnaryCall<GetUsersByIdsRequest, GetUsersByIdsResponse>;
  /** // Get Details About the currently logged in User */
  getCurrentUser: handleUnaryCall<GetCurrentUserRequest, GetCurrentUserResponse>;
  /** Block/Unblock a User */
  blockUser: handleUnaryCall<BlockUserRequest, BlockUserResponse>;
  /** Block/Unblock a User */
  unBlockUser: handleUnaryCall<UnBlockUserRequest, UnBlockUserResponse>;
  /** Get All Instructors (with pagination) */
  getAllInstructors: handleUnaryCall<GetAllInstructorsRequest, GetAllInstructorsResponse>;
  /** Cart */
  addToCart: handleUnaryCall<AddToCartRequest, AddToCartResponse>;
  toggleCartItem: handleUnaryCall<ToggleCartItemRequest, ToggleCartItemResponse>;
  removeFromCart: handleUnaryCall<RemoveFromCartRequest, RemoveFromCartResponse>;
  listUserCart: handleUnaryCall<ListCartRequest, ListCartResponse>;
  /** Wishlist */
  addToWishlist: handleUnaryCall<AddToWishlistRequest, AddToWishlistResponse>;
  toggleWishlistItem: handleUnaryCall<ToggleWishlistItemRequest, ToggleWishlistItemResponse>;
  removeFromWishlist: handleUnaryCall<RemoveFromWishlistRequest, RemoveFromWishlistResponse>;
  listUserWishlist: handleUnaryCall<ListWishlistRequest, ListWishlistResponse>;
}

export interface UserServiceClient extends Client {
  /** Get New Refresh Token */
  registerInstructor(
    request: RegisterInstructorRequest,
    callback: (error: ServiceError | null, response: RegisterInstructorResponse) => void,
  ): ClientUnaryCall;
  registerInstructor(
    request: RegisterInstructorRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RegisterInstructorResponse) => void,
  ): ClientUnaryCall;
  registerInstructor(
    request: RegisterInstructorRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RegisterInstructorResponse) => void,
  ): ClientUnaryCall;
  /** Update User Details */
  updateUserDetails(
    request: UpdateUserDetailsRequest,
    callback: (error: ServiceError | null, response: UpdateUserDetailsResponse) => void,
  ): ClientUnaryCall;
  updateUserDetails(
    request: UpdateUserDetailsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateUserDetailsResponse) => void,
  ): ClientUnaryCall;
  updateUserDetails(
    request: UpdateUserDetailsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateUserDetailsResponse) => void,
  ): ClientUnaryCall;
  /** Get Wallet Transactions for a User (with pagination) */
  getWalletTransactions(
    request: GetWalletTransactionsRequest,
    callback: (error: ServiceError | null, response: GetWalletTransactionsResponse) => void,
  ): ClientUnaryCall;
  getWalletTransactions(
    request: GetWalletTransactionsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetWalletTransactionsResponse) => void,
  ): ClientUnaryCall;
  getWalletTransactions(
    request: GetWalletTransactionsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetWalletTransactionsResponse) => void,
  ): ClientUnaryCall;
  /** Get All Users (with pagination) */
  getAllUsers(
    request: GetAllUsersRequest,
    callback: (error: ServiceError | null, response: GetAllUsersResponse) => void,
  ): ClientUnaryCall;
  getAllUsers(
    request: GetAllUsersRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAllUsersResponse) => void,
  ): ClientUnaryCall;
  getAllUsers(
    request: GetAllUsersRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAllUsersResponse) => void,
  ): ClientUnaryCall;
  /** Get All Users emails */
  getAllUserEmails(
    request: GetAllUserEmailsRequest,
    callback: (error: ServiceError | null, response: GetAllUserEmailsResponse) => void,
  ): ClientUnaryCall;
  getAllUserEmails(
    request: GetAllUserEmailsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAllUserEmailsResponse) => void,
  ): ClientUnaryCall;
  getAllUserEmails(
    request: GetAllUserEmailsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAllUserEmailsResponse) => void,
  ): ClientUnaryCall;
  /** Get All Users emails */
  checkUserEmailExist(
    request: CheckUserByEmailRequest,
    callback: (error: ServiceError | null, response: CheckUserByEmailResponse) => void,
  ): ClientUnaryCall;
  checkUserEmailExist(
    request: CheckUserByEmailRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CheckUserByEmailResponse) => void,
  ): ClientUnaryCall;
  checkUserEmailExist(
    request: CheckUserByEmailRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CheckUserByEmailResponse) => void,
  ): ClientUnaryCall;
  /** Get Details About a Particular User by ID */
  getUser(
    request: GetUserRequest,
    callback: (error: ServiceError | null, response: GetUserResponse) => void,
  ): ClientUnaryCall;
  getUser(
    request: GetUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetUserResponse) => void,
  ): ClientUnaryCall;
  getUser(
    request: GetUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetUserResponse) => void,
  ): ClientUnaryCall;
  /** Get Details About a Particular User by ID */
  getUsersByIds(
    request: GetUsersByIdsRequest,
    callback: (error: ServiceError | null, response: GetUsersByIdsResponse) => void,
  ): ClientUnaryCall;
  getUsersByIds(
    request: GetUsersByIdsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetUsersByIdsResponse) => void,
  ): ClientUnaryCall;
  getUsersByIds(
    request: GetUsersByIdsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetUsersByIdsResponse) => void,
  ): ClientUnaryCall;
  /** // Get Details About the currently logged in User */
  getCurrentUser(
    request: GetCurrentUserRequest,
    callback: (error: ServiceError | null, response: GetCurrentUserResponse) => void,
  ): ClientUnaryCall;
  getCurrentUser(
    request: GetCurrentUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetCurrentUserResponse) => void,
  ): ClientUnaryCall;
  getCurrentUser(
    request: GetCurrentUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetCurrentUserResponse) => void,
  ): ClientUnaryCall;
  /** Block/Unblock a User */
  blockUser(
    request: BlockUserRequest,
    callback: (error: ServiceError | null, response: BlockUserResponse) => void,
  ): ClientUnaryCall;
  blockUser(
    request: BlockUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: BlockUserResponse) => void,
  ): ClientUnaryCall;
  blockUser(
    request: BlockUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: BlockUserResponse) => void,
  ): ClientUnaryCall;
  /** Block/Unblock a User */
  unBlockUser(
    request: UnBlockUserRequest,
    callback: (error: ServiceError | null, response: UnBlockUserResponse) => void,
  ): ClientUnaryCall;
  unBlockUser(
    request: UnBlockUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UnBlockUserResponse) => void,
  ): ClientUnaryCall;
  unBlockUser(
    request: UnBlockUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UnBlockUserResponse) => void,
  ): ClientUnaryCall;
  /** Get All Instructors (with pagination) */
  getAllInstructors(
    request: GetAllInstructorsRequest,
    callback: (error: ServiceError | null, response: GetAllInstructorsResponse) => void,
  ): ClientUnaryCall;
  getAllInstructors(
    request: GetAllInstructorsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAllInstructorsResponse) => void,
  ): ClientUnaryCall;
  getAllInstructors(
    request: GetAllInstructorsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAllInstructorsResponse) => void,
  ): ClientUnaryCall;
  /** Cart */
  addToCart(
    request: AddToCartRequest,
    callback: (error: ServiceError | null, response: AddToCartResponse) => void,
  ): ClientUnaryCall;
  addToCart(
    request: AddToCartRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AddToCartResponse) => void,
  ): ClientUnaryCall;
  addToCart(
    request: AddToCartRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AddToCartResponse) => void,
  ): ClientUnaryCall;
  toggleCartItem(
    request: ToggleCartItemRequest,
    callback: (error: ServiceError | null, response: ToggleCartItemResponse) => void,
  ): ClientUnaryCall;
  toggleCartItem(
    request: ToggleCartItemRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ToggleCartItemResponse) => void,
  ): ClientUnaryCall;
  toggleCartItem(
    request: ToggleCartItemRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ToggleCartItemResponse) => void,
  ): ClientUnaryCall;
  removeFromCart(
    request: RemoveFromCartRequest,
    callback: (error: ServiceError | null, response: RemoveFromCartResponse) => void,
  ): ClientUnaryCall;
  removeFromCart(
    request: RemoveFromCartRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RemoveFromCartResponse) => void,
  ): ClientUnaryCall;
  removeFromCart(
    request: RemoveFromCartRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RemoveFromCartResponse) => void,
  ): ClientUnaryCall;
  listUserCart(
    request: ListCartRequest,
    callback: (error: ServiceError | null, response: ListCartResponse) => void,
  ): ClientUnaryCall;
  listUserCart(
    request: ListCartRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListCartResponse) => void,
  ): ClientUnaryCall;
  listUserCart(
    request: ListCartRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListCartResponse) => void,
  ): ClientUnaryCall;
  /** Wishlist */
  addToWishlist(
    request: AddToWishlistRequest,
    callback: (error: ServiceError | null, response: AddToWishlistResponse) => void,
  ): ClientUnaryCall;
  addToWishlist(
    request: AddToWishlistRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AddToWishlistResponse) => void,
  ): ClientUnaryCall;
  addToWishlist(
    request: AddToWishlistRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AddToWishlistResponse) => void,
  ): ClientUnaryCall;
  toggleWishlistItem(
    request: ToggleWishlistItemRequest,
    callback: (error: ServiceError | null, response: ToggleWishlistItemResponse) => void,
  ): ClientUnaryCall;
  toggleWishlistItem(
    request: ToggleWishlistItemRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ToggleWishlistItemResponse) => void,
  ): ClientUnaryCall;
  toggleWishlistItem(
    request: ToggleWishlistItemRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ToggleWishlistItemResponse) => void,
  ): ClientUnaryCall;
  removeFromWishlist(
    request: RemoveFromWishlistRequest,
    callback: (error: ServiceError | null, response: RemoveFromWishlistResponse) => void,
  ): ClientUnaryCall;
  removeFromWishlist(
    request: RemoveFromWishlistRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RemoveFromWishlistResponse) => void,
  ): ClientUnaryCall;
  removeFromWishlist(
    request: RemoveFromWishlistRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RemoveFromWishlistResponse) => void,
  ): ClientUnaryCall;
  listUserWishlist(
    request: ListWishlistRequest,
    callback: (error: ServiceError | null, response: ListWishlistResponse) => void,
  ): ClientUnaryCall;
  listUserWishlist(
    request: ListWishlistRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListWishlistResponse) => void,
  ): ClientUnaryCall;
  listUserWishlist(
    request: ListWishlistRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListWishlistResponse) => void,
  ): ClientUnaryCall;
}

export const UserServiceClient = makeGenericClientConstructor(
  UserServiceService,
  "user_service.UserService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UserServiceClient;
  service: typeof UserServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
